{"graph_dict": {"WolframAlpha": [["is a", "General Tool"], ["has the functionality that", "Answer scientific questions using Wolfram"], ["inputs", "question"], ["outputs", "answer"], ["is sourced from", "Python Package(langchain)"], ["does not need", "Security Check"]], "question": [["is the input of", "WolframAlpha"], ["is the input of", "BingSearch"], ["is the input of", "CodeInterpreterTools"]], "answer": [["is the output of", "WolframAlpha"], ["is the output of", "BingSearch"], ["is the output of", "CodeInterpreterTools"]], "BingSearch": [["is a", "General Tool"], ["has the functionality that", "Returns a summary of search results using the Bing Search API."], ["inputs", "question"], ["outputs", "answer"], ["is sourced from", "Python Package(langchain)"], ["does not need", "Security Check"]], "DownloadPapers": [["is a", "General Tool"], ["has the functionality that", "Download relevant papers from arxiv based on the provided keywords"], ["inputs", "paper keywords"], ["outputs", "related papers"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "paper keywords": [["is the input of", "DownloadPapers"]], "related papers": [["is the output of", "DownloadPapers"]], "PaperQA": [["is a", "General Tool"], ["has the functionality that", "Conduct professional knowledge Q&A based on existing paper database"], ["inputs", "professional question"], ["outputs", "professional answer"], ["is sourced from", "Python Package(paperqa)"], ["does not need", "Security Check"]], "professional question": [["is the input of", "PaperQA"]], "professional answer": [["is the output of", "PaperQA"]], "CodeInterpreterTools": [["is a", "General Tool"], ["has the functionality that", "Execute python code such as data processing, code execution, and drawing."], ["inputs", "question"], ["outputs", "answer"], ["is sourced from", "Custom Tool"], ["does not need", "Security Check"]], "ComputeProtPara": [["is a", "Biological Tool"], ["has the functionality that", "Compute various physical and chemical parameters for a protein sequence"], ["inputs", "protein sequence"], ["outputs", "protein properties"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "protein sequence": [["is the input of", "ComputeProtPara"], ["is the input of", "ComputePiMw"], ["is the input of", "ComputeProtScale"], ["is the input of", "PredictPeptideMass"], ["is the input of", "PredictSignalPeptide"], ["is the input of", "PredictTransmembrane"], ["is the input of", "ComputeExtinctionCoefficient"], ["is the input of", "SequenceToPdb"], ["is the input of", "RandomMutation"], ["is the output of", "RandomMutation"], ["is the input of", "OverlapPeptideLibraryDesign"], ["is the input of", "AlanineScanningLibraryDesign"], ["is the input of", "TruncationLibraryDesign"], ["is the input of", "PositionalScanningLibraryDesign"], ["is the input of", "CompareSequenceByLogExpectation"], ["is the input of", "ProteinSolubilityPredictor"], ["is the input of", "InherentDisorderedRegionsPredictor"], ["is the input of", "ProteinMotifAnalysis"], ["is the output of", "TranslateDNAtoAminoAcidSequence"], ["is the input of", "RepeatProteinSequenceSearch"], ["is the input of", "DegenerateCodonCalculatorbyAminoAcid"], ["is the input of", "AminoAcidStatistics"], ["is the input of", "DeepTMHMM"], ["is the input of", "PPI3DSingle"], ["is the input of", "PPI3DTwo"], ["is the input of", "INGAHomology"], ["is the input of", "INGAArchitecture"], ["is the input of", "INGAInteraction"], ["is the input of", "MusiteDeep"], ["is the input of", "CalculateEnergyFromSequence"], ["is the input of", "CalculateForceEnergyFromSequence"], ["is the output of", "GenerateSequenceFromEnergy"], ["is the output of", "GetFASTAFromName"], ["is the output of", "DesignProteinAlpha"], ["is the output of", "DesignProteinBeta"], ["is the output of", "DesignProteinAlphaBeta"], ["is the output of", "DesignProteinFromLength"], ["is the input of", "Sulfinator"], ["is the input of", "RedundancyReduction"], ["is the input of", "GenerateRandSequence"], ["is the output of", "GenerateRandSequence"], ["is the input of", "ScanHamap"], ["is the input of", "PredictMyristoylation"], ["is the input of", "CutPeptide"], ["is the input of", "GetAminoAcidFrequency"], ["is the input of", "CalculateHydrophobicityAndPolarity"], ["is the input of", "PerformBlastQuery"]], "protein properties": [["is the output of", "ComputeProtPara"]], "ComputePiMw": [["is a", "Biological Tool"], ["has the functionality that", "Compute the theoretical isoelectric point (pI) and molecular weight (mW) of a protein sequence."], ["inputs", "protein sequence"], ["outputs", "the value of Pi"], ["outputs", "the value of Mw"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "the value of Pi": [["is the output of", "ComputePiMw"]], "the value of Mw": [["is the output of", "ComputePiMw"]], "ComputeProtScale": [["is a", "Biological Tool"], ["has the functionality that", "Compute and represent the profile produced by the hydrophobicity or hydrophilicity parameters scales on a protein sequence"], ["inputs", "protein sequence"], ["outputs", "protein profile"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "protein profile": [["is the output of", "ComputeProtScale"]], "PredictPeptideMass": [["is a", "Biological Tool"], ["has the functionality that", "Cleave a protein sequence with a chosen enzyme/protease, and computes the masses of the generated peptides."], ["inputs", "protein sequence"], ["outputs", "the masses of peptides"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "the masses of peptides": [["is the output of", "PredictPeptideMass"]], "PredictSignalPeptide": [["is a", "Biological Tool"], ["has the functionality that", "Predict the signal peptide of a protein sequence."], ["inputs", "protein sequence"], ["outputs", "signal peptide"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "signal peptide": [["is the output of", "PredictSignalPeptide"]], "PredictTransmembrane": [["is a", "Biological Tool"], ["has the functionality that", "Predict the transmembrane of a protein sequence."], ["inputs", "protein sequence"], ["outputs", "transmembrane"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "transmembrane": [["is the output of", "PredictTransmembrane"]], "ComputeExtinctionCoefficient": [["is a", "Biological Tool"], ["has the functionality that", "Compute the molar extinction coefficient and protein concentration of the protein, and also provides information such as the protein isoelectric point."], ["inputs", "protein sequence"], ["outputs", "molar extinction coefficient"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "molar extinction coefficient": [["is the output of", "ComputeExtinctionCoefficient"]], "SmilesToPdb": [["is a", "Biological Tool"], ["has the functionality that", "Convert the SMILES of the compound into 3D structures"], ["inputs", "SMILES"], ["outputs", "3D structure"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "SMILES": [["is the input of", "SmilesToPdb"], ["is the output of", "ConvertingPeptide2SMILES"], ["is the output of", "Convert3DMolecules2SMILES"], ["is the input of", "SmallMoleculeSimilarityCalculation"], ["is the input of", "CoordsFromSMILES"], ["is the output of", "NameToSMILES"], ["is the input of", "RXNRetrosynthetic"], ["is the input of", "SMILESToWeight"], ["is the input of", "FuncGroups"], ["is the input of", "CheckPatent"], ["is the input of", "ExplainAtomPairScore"], ["is the input of", "GetAtomPairFingerprintAsBitVect"], ["is the input of", "ExplainAtomCode"], ["is the input of", "TestMolecule"], ["is the input of", "AssignPattyTypes"], ["is the input of", "ShowMol"], ["is the input of", "TypeAtomsInMolecule"], ["is the input of", "CalculateEstateIndices"], ["is the input of", "CalculateEstateVsa"], ["is the input of", "GenerateEstateFingerprint"], ["is the input of", "CalculateFsp3"], ["is the input of", "CalculatePmi"], ["is the input of", "SMILESToInChI"], ["is the output of", "InChIKeyToSMILES"], ["is the output of", "InChIToSMILES"], ["is the input of", "SMILEStoSELFIES"], ["is the output of", "SELFIEStoSMILES"], ["is the output of", "RandomMoelcule"], ["is the input of", "ProcessFingerprintMol"], ["is the input of", "FoldFingerprintFromSmiles"], ["is the input of", "GetRdkFingerprintFromSmiles"], ["is the input of", "GenerateFraggleFragments"], ["is the input of", "CheckValidRingCut"], ["is the input of", "BuildAtomPairFpFromSmiles"], ["is the input of", "BuildTorsionsFpFromSmiles"], ["is the input of", "BuildRdkitFpFromSmiles"], ["is the input of", "BuildPharm2DFpFromSmiles"], ["is the input of", "BuildMorganFpFromSmiles"], ["is the input of", "BuildAvalonFpFromSmiles"], ["is the input of", "ConvertSmilesToInchi"], ["is the input of", "GenerateMolKeyFromSmiles"], ["is the input of", "GetStereoCodeFromSmiles"], ["is the input of", "GetPatternFingerprintTemplate"], ["is the input of", "GetExactMolceularWeight"], ["is the input of", "DetermineBondOrders"], ["is the output of", "DetermineBondOrders"], ["is the input of", "DetermineBonds"], ["is the output of", "DetermineBonds"], ["is the input of", "GetPatternFingerprint"], ["is the input of", "GetTemplateMolecule"], ["is the output of", "GetTemplateMolecule"], ["is the input of", "GetTautomers"], ["is the output of", "GetTautomers"], ["is the input of", "GetModifiedAtoms"], ["is the input of", "GetModifiedBonds"], ["is the input of", "CanSerialize"], ["is the input of", "AssignCIPLabels"], ["is the input of", "Enumerate"], ["is the input of", "Deprotect"], ["is the output of", "Deprotect"], ["is the input of", "CondenseAbbreviationSubstanceGroups"], ["is the output of", "CondenseAbbreviationSubstanceGroups"], ["is the output of", "SlnToSmiles"], ["is the input of", "CreateShingling"], ["is the input of", "EncodeMolecule"], ["is the input of", "EncodeSECFP"], ["is the input of", "GetBCUT"], ["is the input of", "GetAutocorrelation2D"], ["is the input of", "GetAutocorrelation3D"], ["is the input of", "GetAsphericity"], ["is the input of", "GetChi0n"], ["is the input of", "GetChi0v"], ["is the input of", "GetChi1n"], ["is the input of", "GetChi1v"], ["is the input of", "GetChi2n"], ["is the input of", "GetChi2v"], ["is the input of", "GetChi3n"], ["is the input of", "GetChi3v"], ["is the input of", "GetChi4n"], ["is the input of", "GetChi4v"], ["is the input of", "GetCoulombMat"], ["is the input of", "GetCrippenDescriptors"], ["is the input of", "GetEEMCharges"], ["is the input of", "GetEccentricity"], ["is the input of", "GetFractionCSP3"], ["is the input of", "GetGETAWAY"], ["is the input of", "GetHallKierAlpha"], ["is the input of", "GetInertialShapeFactor"], ["is the input of", "GetKappa1"], ["is the input of", "GetKappa2"], ["is the input of", "GetKappa3"], ["is the input of", "GetLabuteASA"], ["is the input of", "GetMolFormula"], ["is the input of", "GetMORSE"], ["is the input of", "GetNPR1"], ["is the input of", "GetNPR2"], ["is the input of", "GetAliphaticCarbocyclesNum"], ["is the input of", "GetAliphaticHeterocyclesNum"], ["is the input of", "GetAliphaticRingsNum"], ["is the input of", "GetAmideBondsNum"], ["is the input of", "GetAromaticCarbocyclesNum"], ["is the input of", "GetAromaticHeterocyclesNum"], ["is the input of", "GetAromaticRingsNum"], ["is the input of", "GetAtomStereoCentersNum"], ["is the input of", "GetAtomsNum"], ["is the input of", "GetBridgeheadAtomsNum"], ["is the input of", "GetHBANum"], ["is the input of", "GetHBDNum"], ["is the input of", "GetHeavyAtomsNum"], ["is the input of", "GetHeteroatomsNum"], ["is the input of", "GetHeterocyclesNum"], ["is the input of", "GetLipinskiHBANum"], ["is the input of", "GetLipinskiHBDNum"], ["is the input of", "GetRingsNum"], ["is the input of", "GetRotatableBondsNum"], ["is the input of", "GetSaturatedCarbocyclesNum"], ["is the input of", "GetSaturatedHeterocyclesNum"], ["is the input of", "GetSaturatedRingsNum"], ["is the input of", "GetSpiroAtomsNum"], ["is the input of", "GetUnspecifiedAtomStereoCentersNum"], ["is the input of", "AssignOxidationNumbers"], ["is the output of", "AssignOxidationNumbers"], ["is the input of", "CalculatePBF"], ["is the input of", "CalculatePMI1"], ["is the input of", "CalculatePMI2"], ["is the input of", "CalculatePMI3"], ["is the input of", "CalculatePhi"], ["is the input of", "CalculateRDF"], ["is the input of", "CalculateRadiusOfGyration"], ["is the input of", "CalculateSpherocityIndex"], ["is the input of", "CalculateTPSA"], ["is the input of", "CalculateWHIM"], ["is the input of", "CustomPropertyVSA"], ["is the input of", "GetAtomFeature"], ["is the input of", "GetAtomPairFingerprint"], ["is the input of", "GetConnectivityInvariants"], ["is the input of", "GetFeatureInvariants"], ["is the input of", "GetAtomPairCode"], ["is the input of", "GetHybridization"], ["is the input of", "GetRingSystems"], ["is the input of", "GetMACCSKeysFingerprint"], ["is the input of", "GetMorganFingerprint"], ["is the input of", "GetTopologicalTorsionFingerprint"], ["is the input of", "GetUSR"], ["is the input of", "GetUSRCAT"], ["is the input of", "AddHydrogens"], ["is the output of", "AddHydrogens"], ["is the input of", "AddWavyBondsForStereoAny"], ["is the output of", "AddWavyBondsForStereoAny"], ["is the input of", "AssignAtomChiralTagsFromStructure"], ["is the output of", "AssignAtomChiralTagsFromStructure"], ["is the input of", "AssignRadicals"], ["is the output of", "AssignRadicals"], ["is the input of", "AssignStereoChemistry"], ["is the output of", "AssignStereoChemistry"], ["is the input of", "GetAdjacencyMatrix"], ["is the input of", "GetAllowNontetrahedralChirality"], ["is the input of", "GetDistanceMatrix"], ["is the input of", "GetFormalCharge"], ["is the input of", "GetFormalChargeOfAtoms"], ["is the input of", "GetMolFrags"], ["is the input of", "GetUseLegacyStereoPerception"], ["is the input of", "HapticBondsToDative"], ["is the output of", "HapticBondsToDative"], ["is the input of", "HasQueryHs"], ["is the input of", "Kekulize"], ["is the output of", "Kekulize"], ["is the input of", "MergeQueryHs"], ["is the output of", "MergeQueryHs"], ["is the input of", "MurckoDecompose"], ["is the output of", "MurckoDecompose"], ["is the input of", "RemoveHydrogens"], ["is the output of", "RemoveHydrogens"], ["is the input of", "RemoveStereochemistry"], ["is the output of", "RemoveStereochemistry"], ["is the input of", "SetAromaticity"], ["is the output of", "SetAromaticity"], ["is the input of", "SetBondStereoFromDirections"], ["is the output of", "SetBondStereoFromDirections"], ["is the output of", "MOFToSMILES"], ["is the input of", "SMILESToCAS"]], "3D structure": [["is the output of", "SmilesToPdb"], ["is the output of", "SequenceToPdb"]], "SequenceToPdb": [["is a", "Biological Tool"], ["has the functionality that", "Convert the protein sequence into 3D structures and generate PDB format files, and calculate the residue accuracy of protein sequences"], ["inputs", "protein sequence"], ["outputs", "3D structure"], ["outputs", "the plddt value"], ["is sourced from", "AI Model"], ["does not need", "Security Check"]], "the plddt value": [["is the output of", "SequenceToPdb"]], "RandomMutation": [["is a", "Biological Tool"], ["has the functionality that", "Randomly mutate a site in protein sequences"], ["inputs", "protein sequence"], ["outputs", "protein sequence"], ["is sourced from", "Custom Tool"], ["does not need", "Security Check"]], "OverlapPeptideLibraryDesign": [["is a", "Biological Tool"], ["has the functionality that", "Design overlapping peptide library"], ["inputs", "protein sequence"], ["inputs", "peptide length"], ["inputs", "overlapping lenth"], ["outputs", "Peptide library(sequece length hydrophobicity)"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "peptide length": [["is the input of", "OverlapPeptideLibraryDesign"]], "overlapping lenth": [["is the input of", "OverlapPeptideLibraryDesign"]], "Peptide library(sequece length hydrophobicity)": [["is the output of", "OverlapPeptideLibraryDesign"], ["is the output of", "AlanineScanningLibraryDesign"], ["is the output of", "TruncationLibraryDesign"], ["is the output of", "PositionalScanningLibraryDesign"]], "AlanineScanningLibraryDesign": [["is a", "Biological Tool"], ["has the functionality that", "Design alanine screening peptide library"], ["inputs", "protein sequence"], ["outputs", "Peptide library(sequece length hydrophobicity)"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "TruncationLibraryDesign": [["is a", "Biological Tool"], ["has the functionality that", "Design truncation library"], ["inputs", "protein sequence"], ["outputs", "Peptide library(sequece length hydrophobicity)"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "PositionalScanningLibraryDesign": [["is a", "Biological Tool"], ["has the functionality that", "Design positional scanning library"], ["inputs", "protein sequence"], ["inputs", "residue position"], ["outputs", "Peptide library(sequece length hydrophobicity)"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "residue position": [["is the input of", "PositionalScanningLibraryDesign"]], "ProteaseDigestion": [["is a", "Biological Tool"], ["has the functionality that", "Simulate the hydrolysis behavior of protein degrading enzymes"], ["inputs", "Protein sequence"], ["inputs", "protease"], ["outputs", "the hydrolysis results of peptide substrates (cleavage site and products)"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Protein sequence": [["is the input of", "ProteaseDigestion"], ["is the input of", "LabelAntibody"], ["is the input of", "AntibodySequenceNumbering"], ["is the input of", "ProteinIsoelectricPointCalculator"], ["is the input of", "ProteinNuclearLocalizationSequencePrediction"]], "protease": [["is the input of", "ProteaseDigestion"]], "the hydrolysis results of peptide substrates (cleavage site and products)": [["is the output of", "ProteaseDigestion"]], "AffinityCalculator": [["is a", "Biological Tool"], ["has the functionality that", "Calculate affinity based on Mohr Gibbs free energy"], ["inputs", "dg"], ["inputs", "Temperature"], ["inputs", "unit"], ["outputs", "Affinity"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "dg": [["is the input of", "AffinityCalculator"]], "Temperature": [["is the input of", "AffinityCalculator"]], "unit": [["is the input of", "AffinityCalculator"]], "Affinity": [["is the output of", "AffinityCalculator"]], "LabelAntibody": [["is a", "Biological Tool"], ["has the functionality that", "Label the variable regions of antibodies with CDR and FR regions"], ["inputs", "Protein sequence"], ["inputs", "numbering scheme"], ["inputs", "definition scheme"], ["outputs", "CDR annotation(antibody name and sequence)"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "numbering scheme": [["is the input of", "LabelAntibody"]], "definition scheme": [["is the input of", "LabelAntibody"]], "CDR annotation(antibody name and sequence)": [["is the output of", "LabelAntibody"]], "AntibodySequenceNumbering": [["is a", "Biological Tool"], ["has the functionality that", "Number the amino acid sequence of the antibody; Identify the input sequence and distinguish between immunoglobulin (IG) and T cell receptor (TR)"], ["inputs", "Protein sequence"], ["inputs", "numbering system"], ["outputs", "IG/TR antibody structure domain"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "numbering system": [["is the input of", "AntibodySequenceNumbering"]], "IG/TR antibody structure domain": [["is the output of", "AntibodySequenceNumbering"]], "CompareCircularDNA": [["is a", "Biological Tool"], ["has the functionality that", "Compare the homologous sequences of different species"], ["inputs", "DNA sequence pair"], ["outputs", "Comparison results"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "DNA sequence pair": [["is the input of", "CompareCircularDNA"]], "Comparison results": [["is the output of", "CompareCircularDNA"], ["is the output of", "CompareSequenceByLogExpectation"], ["is the output of", "DoubleSequenceGlobalAlignment"], ["is the output of", "DoubleSequenceLocalAlignment"], ["is the output of", "SequenceSimilarityCalculator"]], "CompareSequenceByLogExpectation": [["is a", "Biological Tool"], ["has the functionality that", "Compare multiple sequence by Log-Expectation"], ["inputs", "protein sequence"], ["outputs", "Comparison results"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "ProteinIsoelectricPointCalculator": [["is a", "Biological Tool"], ["has the functionality that", "Calculate the Isoelectric point"], ["inputs", "Protein sequence"], ["inputs", "pKa source"], ["outputs", "Isoelectric point"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "pKa source": [["is the input of", "ProteinIsoelectricPointCalculator"]], "Isoelectric point": [["is the output of", "ProteinIsoelectricPointCalculator"]], "DoubleSequenceGlobalAlignment": [["is a", "Biological Tool"], ["has the functionality that", "compute the global alignment result of two protein sequence"], ["inputs", "protein sequence pair"], ["outputs", "Comparison results"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "protein sequence pair": [["is the input of", "DoubleSequenceGlobalAlignment"], ["is the input of", "DoubleSequenceLocalAlignment"], ["is the input of", "PredictYeastProteinInteraction"]], "ProteinSolubilityPredictor": [["is a", "Biological Tool"], ["has the functionality that", "Prediction of protein solubility based on sequence"], ["inputs", "protein sequence"], ["outputs", "Solubility score"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Solubility score": [["is the output of", "ProteinSolubilityPredictor"]], "InherentDisorderedRegionsPredictor": [["is a", "Biological Tool"], ["has the functionality that", "Predicting the inherent disordered protein regions"], ["inputs", "protein sequence"], ["outputs", "image"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "image": [["is the output of", "InherentDisorderedRegionsPredictor"]], "DoubleSequenceLocalAlignment": [["is a", "Biological Tool"], ["has the functionality that", "Align local region fragments in each sequence"], ["inputs", "protein sequence pair"], ["outputs", "Comparison results"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "ProteinMotifAnalysis": [["is a", "Biological Tool"], ["has the functionality that", "Functional prediction based on protein sequence characteristics"], ["inputs", "protein sequence"], ["outputs", "motif"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "motif": [["is the output of", "ProteinMotifAnalysis"]], "SequenceSimilarityCalculator": [["is a", "Biological Tool"], ["has the functionality that", "Calculate similarity of a set of aligned sequences (FASTA or GCG format)"], ["inputs", "Aligned sequences in FASTA or GCG format"], ["outputs", "Comparison results"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Aligned sequences in FASTA or GCG format": [["is the input of", "SequenceSimilarityCalculator"]], "FindORF": [["is a", "Biological Tool"], ["has the functionality that", "Find open reading frames in DNA sequences"], ["inputs", "DNA sequence"], ["outputs", "Open Reading Frame"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "DNA sequence": [["is the input of", "FindORF"], ["is the input of", "RepeatDNASequenceSearch"], ["is the input of", "CalculateSingleLinearDNAMolecularWeight"], ["is the input of", "CalculateDoubleLinearDNAMolecularWeight"], ["is the input of", "CalculateSingleCircleDNAMolecularWeight"], ["is the input of", "CalculateDoubleCircleDNAMolecularWeight"], ["is the input of", "CpGIslandPrediction"], ["is the input of", "SummaryEnzymeCleavageSites"], ["is the output of", "RandomDNAGeneration"], ["is the input of", "GetReverseComplement"]], "Open Reading Frame": [["is the output of", "FindORF"]], "TranslateDNAtoAminoAcidSequence": [["is a", "Biological Tool"], ["has the functionality that", "Translate DNA sequences into protein sequences using set open reading frames"], ["inputs", "DNA sequences"], ["outputs", "protein sequence"], ["is sourced from", "Web API"], ["needs", "Security Check"]], "DNA sequences": [["is the input of", "TranslateDNAtoAminoAcidSequence"]], "RepeatDNASequenceSearch": [["is a", "Biological Tool"], ["has the functionality that", "Searching for duplicate fragments in DNA sequences"], ["inputs", "DNA sequence"], ["inputs", "protein length"], ["outputs", "repeat segment"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "protein length": [["is the input of", "RepeatDNASequenceSearch"], ["is the input of", "RepeatProteinSequenceSearch"], ["is the input of", "DesignProteinAlpha"], ["is the input of", "DesignProteinBeta"], ["is the input of", "DesignProteinAlphaBeta"]], "repeat segment": [["is the output of", "RepeatDNASequenceSearch"], ["is the output of", "RepeatProteinSequenceSearch"]], "RepeatProteinSequenceSearch": [["is a", "Biological Tool"], ["has the functionality that", "Searching for duplicate fragments in protein sequences"], ["inputs", "protein sequence"], ["inputs", "protein length"], ["outputs", "repeat segment"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "PalindromicSequencesFinder": [["is a", "Biological Tool"], ["has the functionality that", "Searches for palindrome sequences in the sequence"], ["inputs", "DNA/RNA sequence"], ["inputs", "protein length range"], ["outputs", "Palindrome sequence"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "DNA/RNA sequence": [["is the input of", "PalindromicSequencesFinder"]], "protein length range": [["is the input of", "PalindromicSequencesFinder"]], "Palindrome sequence": [["is the output of", "PalindromicSequencesFinder"]], "DegenerateCodonCalculatorbyAminoAcid": [["is a", "Biological Tool"], ["has the functionality that", "Calculates the optimal degenerate codon encoding one or more amino acids"], ["inputs", "protein sequence"], ["outputs", "Simplified amino acid abbreviation"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Simplified amino acid abbreviation": [["is the output of", "DegenerateCodonCalculatorbyAminoAcid"]], "CalculateAminoAcidbyDegenerateCodon": [["is a", "Biological Tool"], ["has the functionality that", "Calculate the amino acid encoded by a degenerate codon"], ["inputs", "codon"], ["outputs", "Amino Acid"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "codon": [["is the input of", "CalculateAminoAcidbyDegenerateCodon"]], "Amino Acid": [["is the output of", "CalculateAminoAcidbyDegenerateCodon"]], "ProteinNuclearLocalizationSequencePrediction": [["is a", "Biological Tool"], ["has the functionality that", "Predict protein nuclear localization signals"], ["inputs", "Protein sequence"], ["inputs", "posterior probability"], ["inputs", "prediction model"], ["outputs", "nuclear localization sequence"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "posterior probability": [["is the input of", "ProteinNuclearLocalizationSequencePrediction"]], "prediction model": [["is the input of", "ProteinNuclearLocalizationSequencePrediction"]], "nuclear localization sequence": [["is the output of", "ProteinNuclearLocalizationSequencePrediction"]], "ConvertingPeptide2SMILES": [["is a", "Biological Tool"], ["has the functionality that", "Convert peptide sequences into SMILES format"], ["inputs", "Peptide sequence or type"], ["outputs", "SMILES"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Peptide sequence or type": [["is the input of", "ConvertingPeptide2SMILES"]], "Convert3DMolecules2SMILES": [["is a", "Biological Tool"], ["has the functionality that", "Transform 3D structured small molecules into SMILES"], ["inputs", "Structural model with suffixes mol2 mol sdf pdbqt pdb"], ["outputs", "SMILES"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Structural model with suffixes mol2 mol sdf pdbqt pdb": [["is the input of", "Convert3DMolecules2SMILES"]], "DrawProteinStructure": [["is a", "Biological Tool"], ["has the functionality that", "Draw high-quality 3D structure diagram online"], ["inputs", "Structural model with suffix pdb or cif"], ["outputs", "3D structural diagram"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Structural model with suffix pdb or cif": [["is the input of", "DrawProteinStructure"]], "3D structural diagram": [["is the output of", "DrawProteinStructure"]], "SmallMoleculeSimilarityCalculation": [["is a", "Biological Tool"], ["has the functionality that", "Generate molecular fingerprints based on RDKit and use them to calculate molecular similarity"], ["inputs", "SMILES"], ["outputs", "molecular similarity"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "molecular similarity": [["is the output of", "SmallMoleculeSimilarityCalculation"]], "CalculateSingleLinearDNAMolecularWeight": [["is a", "Biological Tool"], ["has the functionality that", "Calculate single-stranded linear DNA molecular weight"], ["inputs", "DNA sequence"], ["outputs", "DNA molecular weight"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "DNA molecular weight": [["is the output of", "CalculateSingleLinearDNAMolecularWeight"], ["is the output of", "CalculateDoubleLinearDNAMolecularWeight"], ["is the output of", "CalculateSingleCircleDNAMolecularWeight"], ["is the output of", "CalculateDoubleCircleDNAMolecularWeight"]], "CalculateDoubleLinearDNAMolecularWeight": [["is a", "Biological Tool"], ["has the functionality that", "Calculate double-stranded linear DNA molecular weight"], ["inputs", "DNA sequence"], ["outputs", "DNA molecular weight"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "CalculateSingleCircleDNAMolecularWeight": [["is a", "Biological Tool"], ["has the functionality that", "Calculate single-stranded circular DNA molecular weight"], ["inputs", "DNA sequence"], ["outputs", "DNA molecular weight"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "CalculateDoubleCircleDNAMolecularWeight": [["is a", "Biological Tool"], ["has the functionality that", "Calculate double-stranded circular DNA molecular weight"], ["inputs", "DNA sequence"], ["outputs", "DNA molecular weight"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "CpGIslandPrediction": [["is a", "Biological Tool"], ["has the functionality that", "Predict potential CpG islands using the Gardiner Garden and Frommer method"], ["inputs", "DNA sequence"], ["outputs", "CpG island"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "CpG island": [["is the output of", "CpGIslandPrediction"]], "PCRPrimerProperties": [["is a", "Biological Tool"], ["has the functionality that", "Calculate PCR primer properties"], ["inputs", "One or more sequences"], ["outputs", "Annealing temperature"], ["outputs", "GC content"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "One or more sequences": [["is the input of", "PCRPrimerProperties"]], "Annealing temperature": [["is the output of", "PCRPrimerProperties"]], "GC content": [["is the output of", "PCRPrimerProperties"]], "AminoAcidStatistics": [["is a", "Biological Tool"], ["has the functionality that", "Count the number of each amino acid and calculate the proportion"], ["inputs", "protein sequence"], ["outputs", "Number of amino acids"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Number of amino acids": [["is the output of", "AminoAcidStatistics"]], "SummaryEnzymeCleavageSites": [["is a", "Biological Tool"], ["has the functionality that", "Count the number and location of commonly used restriction endonucleating recognition sites in DNA sequences."], ["inputs", "DNA sequence"], ["outputs", "The number and position of loci"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "The number and position of loci": [["is the output of", "SummaryEnzymeCleavageSites"]], "RandomDNAGeneration": [["is a", "Biological Tool"], ["has the functionality that", "Generate random DNA sequences based on specified lengths"], ["inputs", "DNA Sequence length"], ["outputs", "DNA sequence"], ["is sourced from", "Web API"], ["needs", "Security Check"]], "DNA Sequence length": [["is the input of", "RandomDNAGeneration"]], "NucleicAcidGCCalculator": [["is a", "Biological Tool"], ["has the functionality that", "Calculate nucleic acid sequence GC content"], ["inputs", "Nucleic acid sequence"], ["inputs", "window size"], ["inputs", "base type"], ["outputs", "Nucleic acid sequence GC content"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Nucleic acid sequence": [["is the input of", "NucleicAcidGCCalculator"]], "window size": [["is the input of", "NucleicAcidGCCalculator"]], "base type": [["is the input of", "NucleicAcidGCCalculator"]], "Nucleic acid sequence GC content": [["is the output of", "NucleicAcidGCCalculator"]], "DeepTMHMM": [["is a", "Biological Tool"], ["has the functionality that", "Predict the topology of both alpha-helical and beta-barrel transmembrane proteins."], ["inputs", "protein sequence"], ["outputs", "predicted topologies"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "predicted topologies": [["is the output of", "DeepTMHMM"]], "PPI3DSingle": [["is a", "Biological Tool"], ["has the functionality that", "Search for all the interactions involving your query protein(s) using single-sequence search"], ["inputs", "protein sequence"], ["outputs", "all the interactions involving your query protein"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "all the interactions involving your query protein": [["is the output of", "PPI3DSingle"]], "PPI3DTwo": [["is a", "Biological Tool"], ["has the functionality that", "Search for interactions between a pair of proteins (protein groups) using two-sequences search"], ["inputs", "protein sequence"], ["outputs", "interactions between a pair of proteins (protein groups)"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "interactions between a pair of proteins (protein groups)": [["is the output of", "PPI3DTwo"]], "PPI3DPDB": [["is a", "Biological Tool"], ["has the functionality that", "Query all binary protein interactions in a single PDB entry"], ["inputs", "PDB ID"], ["outputs", "all binary protein interactions in a single PDB entry"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "PDB ID": [["is the input of", "PPI3DPDB"], ["is the input of", "Mutabind2"], ["is the input of", "NeEMO"], ["is the input of", "AnalyzeProteinCATHFromPDBID"], ["is the input of", "FetchProteinStructureFromPDBID"]], "all binary protein interactions in a single PDB entry": [["is the output of", "PPI3DPDB"]], "Mutabind2": [["is a", "Biological Tool"], ["has the functionality that", "Evaluates the effects of mutations on protein-protein interactions for soluble complexes."], ["inputs", "PDB ID"], ["outputs", "interaction partners"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "interaction partners": [["is the output of", "Mutabind2"]], "HIPPIE": [["is a", "Biological Tool"], ["has the functionality that", "Generate reliable and meaningful human protein-protein interaction networks"], ["inputs", "a single UniProt identifier"], ["inputs", "gene symbol"], ["inputs", "Entrez gene id"], ["outputs", "interactor"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "a single UniProt identifier": [["is the input of", "HIPPIE"]], "gene symbol": [["is the input of", "HIPPIE"]], "Entrez gene id": [["is the input of", "HIPPIE"]], "interactor": [["is the output of", "HIPPIE"]], "INGAHomology": [["is a", "Biological Tool"], ["has the functionality that", "Generate the Interaction Network GO Annotation by the method of Homology, inferred from sequence similarity"], ["inputs", "protein sequence"], ["inputs", "UniProtKB accessions"], ["outputs", "JSON files"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "UniProtKB accessions": [["is the input of", "INGAHomology"], ["is the input of", "INGAArchitecture"], ["is the input of", "INGAInteraction"]], "JSON files": [["is the output of", "INGAHomology"], ["is the output of", "INGAArchitecture"], ["is the output of", "INGAInteraction"]], "INGAArchitecture": [["is a", "Biological Tool"], ["has the functionality that", "Generate the Interaction Network GO Annotation by the method of Architectures, from predicted signatures"], ["inputs", "protein sequence"], ["inputs", "UniProtKB accessions"], ["outputs", "JSON files"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "INGAInteraction": [["is a", "Biological Tool"], ["has the functionality that", "Generate the Interaction Network GO Annotation by the method of Protein-protein Interaction networks"], ["inputs", "protein sequence"], ["inputs", "UniProtKB accessions"], ["outputs", "JSON files"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "MusiteDeep": [["is a", "Biological Tool"], ["has the functionality that", "Predict Protein post-translational modification sites"], ["inputs", "protein sequence"], ["outputs", "site prediction"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "site prediction": [["is the output of", "MusiteDeep"]], "NeEMO": [["is a", "Biological Tool"], ["has the functionality that", "Evaluate changes in protein stability caused by amino acid (AA) mutations."], ["inputs", "PDB ID"], ["outputs", "processed structure"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "processed structure": [["is the output of", "NeEMO"]], "AnalyzeProteinCATHFromPDBID": [["is a", "Biological Tool"], ["has the functionality that", "Query the classification information of a specific protein in the CATH database"], ["inputs", "PDB ID"], ["outputs", "CATH classification"], ["is sourced from", "Python Package(prody)"], ["does not need", "Security Check"]], "CATH classification": [["is the output of", "AnalyzeProteinCATHFromPDBID"]], "AnalyzeProteinLengthFromPDB": [["is a", "Biological Tool"], ["has the functionality that", "Determines the sequence length of a protein given its PDB ID or file name"], ["inputs", "PDB ID or PDB name"], ["outputs", "protein sequence length"], ["is sourced from", "Python Package(chroma)"], ["does not need", "Security Check"]], "PDB ID or PDB name": [["is the input of", "AnalyzeProteinLengthFromPDB"]], "protein sequence length": [["is the output of", "AnalyzeProteinLengthFromPDB"]], "FixPDBFile": [["is a", "Biological Tool"], ["has the functionality that", "Inserts a CRYST1 record into a PDB file if it is missing."], ["inputs", "PDB file"], ["outputs", "PDB file"], ["is sourced from", "Custom Tool"], ["does not need", "Security Check"]], "PDB file": [["is the input of", "FixPDBFile"], ["is the output of", "FixPDBFile"], ["is the input of", "AnalyzeProteinStructure"], ["is the output of", "FetchProteinStructureFromPDBID"], ["is the input of", "AnalyzeAtomCount"], ["is the input of", "CalculateMolecularWeight"], ["is the input of", "CalculateCenterOfMass"], ["is the input of", "CalculateAverageCoordinates"], ["is the input of", "CalculateAtomDistance"]], "CoordsFromSMILES": [["is a", "Biological Tool"], ["has the functionality that", "Molecule-based SMILES generation of 3D coordinates"], ["inputs", "SMILES"], ["outputs", "3D Coordinates"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "3D Coordinates": [["is the output of", "CoordsFromSMILES"]], "CalculateEnergyFromSequence": [["is a", "Biological Tool"], ["has the functionality that", "Calculate the corresponding unfolding energy based on the protein sequence"], ["inputs", "protein sequence"], ["outputs", "Unfolding  Energy"], ["is sourced from", "AI Model"], ["does not need", "Security Check"]], "Unfolding  Energy": [["is the output of", "CalculateEnergyFromSequence"], ["is the output of", "CalculateForceEnergyFromSequence"]], "CalculateForceEnergyFromSequence": [["is a", "Biological Tool"], ["has the functionality that", "Calculates both the unfolding force and energy of a protein"], ["inputs", "protein sequence"], ["outputs", "Unfolding  Energy"], ["outputs", "Unfolding  Force"], ["is sourced from", "AI Model"], ["does not need", "Security Check"]], "Unfolding  Force": [["is the output of", "CalculateForceEnergyFromSequence"]], "GenerateSequenceFromEnergy": [["is a", "Biological Tool"], ["has the functionality that", "Generates a protein sequence based on the specified energy level."], ["inputs", "Unfolding energy"], ["outputs", "protein sequence"], ["is sourced from", "AI Model"], ["does not need", "Security Check"]], "Unfolding energy": [["is the input of", "GenerateSequenceFromEnergy"]], "GetFASTAFromName": [["is a", "Biological Tool"], ["has the functionality that", "Query the corresponding fasta sequence based on the protein name"], ["inputs", "protein name"], ["outputs", "protein sequence"], ["is sourced from", "Web API"], ["needs", "Security Check"]], "protein name": [["is the input of", "GetFASTAFromName"], ["is the input of", "CalculateProteinANM"]], "CalculateProteinANM": [["is a", "Biological Tool"], ["has the functionality that", "Calculates the Anisotropic Network Model (ANM) to analyze the vibrational frequencies and dynamic motions of a protein "], ["inputs", "protein name"], ["outputs", "ANM Calculation Results"], ["is sourced from", "Python Package(prody)"], ["needs", "Security Check"]], "ANM Calculation Results": [["is the output of", "CalculateProteinANM"]], "AnalyzeProteinStructure": [["is a", "Biological Tool"], ["has the functionality that", "Analyze the secondary structure composition of proteins given in pdb format"], ["inputs", "PDB file"], ["outputs", "Json file"], ["is sourced from", "Python Package(Bio.PDB)"], ["does not need", "Security Check"]], "Json file": [["is the output of", "AnalyzeProteinStructure"]], "DesignProteinAlpha": [["is a", "Biological Tool"], ["has the functionality that", "Designs a protein with an alpha structure based on a given length and generates its structure file in PDB format."], ["inputs", "protein length"], ["outputs", "protein sequence"], ["is sourced from", "Python Package(chroma)"], ["needs", "Security Check"]], "DesignProteinBeta": [["is a", "Biological Tool"], ["has the functionality that", "Designs a protein with a beta structure based on a given length and generates its structure file in PDB format."], ["inputs", "protein length"], ["outputs", "protein sequence"], ["is sourced from", "Python Package(chroma)"], ["needs", "Security Check"]], "DesignProteinAlphaBeta": [["is a", "Biological Tool"], ["has the functionality that", "Designs a protein with an alpha-beta structure based on a given length and generates its structure file in PDB format."], ["inputs", "protein length"], ["outputs", "protein sequence"], ["is sourced from", "Python Package(chroma)"], ["needs", "Security Check"]], "DesignProteinFromLength": [["is a", "Biological Tool"], ["has the functionality that", "Design a protein sequence of a specified length"], ["inputs", "protein sequences length"], ["outputs", "protein sequence"], ["is sourced from", "Python Package(chroma)"], ["needs", "Security Check"]], "protein sequences length": [["is the input of", "DesignProteinFromLength"]], "PredictYeastProteinInteraction": [["is a", "Biological Tool"], ["has the functionality that", "Predict whether two given yeast protein sequences can interact"], ["inputs", "protein sequence pair"], ["outputs", "True or False"], ["is sourced from", "AI Model"], ["does not need", "Security Check"]], "True or False": [["is the output of", "PredictYeastProteinInteraction"], ["is the output of", "PredictDrugTargetInteraction"], ["is the output of", "IsValidInChIKey"], ["is the output of", "CheckValidRingCut"], ["is the output of", "IsSubstructof"], ["is the output of", "CanSerialize"], ["is the output of", "GetAllowNontetrahedralChirality"], ["is the output of", "GetUseLegacyStereoPerception"], ["is the output of", "HasQueryHs"], ["is the output of", "IsMagneticByMaterialId"], ["is the output of", "IsMagneticByFormula"], ["is the output of", "IsMetalByMaterialId"], ["is the output of", "IsMetalByFormula"], ["is the output of", "IsStableByMaterialId"], ["is the output of", "IsStableByFormula"], ["is the output of", "IsDeprecated"]], "PredictDrugTargetInteraction": [["is a", "Biological Tool"], ["has the functionality that", "Predict whether molecules in SELFIES format and target protein sequences can interact"], ["inputs", "SELFIES and protein sequence"], ["outputs", "True or False"], ["is sourced from", "AI Model"], ["does not need", "Security Check"]], "SELFIES and protein sequence": [["is the input of", "PredictDrugTargetInteraction"]], "GenerateMoleculeDescription": [["is a", "Biological Tool"], ["has the functionality that", "Given a molecule SELFIES, generates its textual description"], ["inputs", "SELFIES"], ["outputs", "Molecular description"], ["is sourced from", "AI Model"], ["needs", "Security Check"]], "SELFIES": [["is the input of", "GenerateMoleculeDescription"], ["is the output of", "SMILEStoSELFIES"], ["is the input of", "SELFIEStoSMILES"], ["is the output of", "RandomMoelcule"], ["is the input of", "LengthSELFIES"], ["is the input of", "SplitSELFIES"]], "Molecular description": [["is the output of", "GenerateMoleculeDescription"]], "TexToMoleculeSELFIES": [["is a", "Biological Tool"], ["has the functionality that", "generate the SELFIES and SMILES based on the textual description of the molecule"], ["inputs", "molecule description"], ["outputs", "SELFIES and SMILES"], ["is sourced from", "AI Model"], ["needs", "Security Check"]], "molecule description": [["is the input of", "TexToMoleculeSELFIES"]], "SELFIES and SMILES": [["is the output of", "TexToMoleculeSELFIES"]], "FetchProteinStructureFromPDBID": [["is a", "Biological Tool"], ["has the functionality that", "Fetches the protein structure file (.pdb) for the given PDB ID"], ["inputs", "PDB ID"], ["outputs", "PDB file"], ["is sourced from", "Python Package(prody)"], ["does not need", "Security Check"]], "Sulfinator": [["is a", "Biological Tool"], ["has the functionality that", "Predict tyrosine sulfation sites in protein sequences"], ["inputs", "protein sequence"], ["outputs", "sulfenylation sites"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "sulfenylation sites": [["is the output of", "Sulfinator"]], "RedundancyReduction": [["is a", "Biological Tool"], ["has the functionality that", "Computes the redundancy reduction of several protein sequences"], ["inputs", "protein sequence"], ["outputs", "redundancy redution"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "redundancy redution": [["is the output of", "RedundancyReduction"]], "GenerateRandSequence": [["is a", "Biological Tool"], ["has the functionality that", "Generates a random protein sequence of a given size."], ["inputs", "protein sequence"], ["outputs", "protein sequence"], ["is sourced from", "Web API"], ["needs", "Security Check"]], "ScanHamap": [["is a", "Biological Tool"], ["has the functionality that", "Classify (and annotate) your own protein sequences by using the collection of HAMAP family profiles and annotation rules"], ["inputs", "protein sequence"], ["outputs", "HAMAP scan result"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "HAMAP scan result": [["is the output of", "ScanHamap"]], "PredictMyristoylation": [["is a", "Biological Tool"], ["has the functionality that", "Predicts potential myristoylation sites in a given protein sequence."], ["inputs", "protein sequence"], ["outputs", "myristoylation sites"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "myristoylation sites": [["is the output of", "PredictMyristoylation"]], "CutPeptide": [["is a", "Biological Tool"], ["has the functionality that", "Predicts potential substrate cleavage sites in a given protein sequence."], ["inputs", "protein sequence"], ["outputs", "possible cleavage sites"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "possible cleavage sites": [["is the output of", "CutPeptide"]], "GetCoronaOrthologs": [["is a", "Biological Tool"], ["has the functionality that", "retrieves orthologs of a protein of interest from the OMA database."], ["inputs", "UniProtKB ID"], ["outputs", "orthologs"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "UniProtKB ID": [["is the input of", "GetCoronaOrthologs"]], "orthologs": [["is the output of", "GetCoronaOrthologs"]], "AnalyzeAtomCount": [["is a", "Biological Tool"], ["has the functionality that", "Analyzes the number of atoms in a PDB file using MDAnalysis"], ["inputs", "PDB file"], ["outputs", "Total atom count"], ["is sourced from", "Python Package (MDAnalysis)"], ["does not need", "Security Check"]], "Total atom count": [["is the output of", "AnalyzeAtomCount"]], "CalculateMolecularWeight": [["is a", "Biological Tool"], ["has the functionality that", "Calculates the molecular weight of a structure in a PDB file using MDAnalysis"], ["inputs", "PDB file"], ["outputs", "Molecular weight (g/mol)"], ["is sourced from", "Python Package (MDAnalysis)"], ["does not need", "Security Check"]], "Molecular weight (g/mol)": [["is the output of", "CalculateMolecularWeight"]], "CalculateCenterOfMass": [["is a", "Biological Tool"], ["has the functionality that", "Calculates the center of mass of the molecule in a PDB file using MDAnalysis"], ["inputs", "PDB file"], ["outputs", "Center of mass coordinates"], ["is sourced from", "Python Package (MDAnalysis)"], ["does not need", "Security Check"]], "Center of mass coordinates": [["is the output of", "CalculateCenterOfMass"]], "CalculateAverageCoordinates": [["is a", "Biological Tool"], ["has the functionality that", "Calculates the average coordinates of all atoms in a PDB file using MDAnalysis"], ["inputs", "PDB file"], ["outputs", "Average coordinates"], ["is sourced from", "Python Package (MDAnalysis)"], ["does not need", "Security Check"]], "Average coordinates": [["is the output of", "CalculateAverageCoordinates"]], "CalculateAtomDistance": [["is a", "Biological Tool"], ["has the functionality that", "Calculates the distance between the first two atoms in a PDB file using MDAnalysis"], ["inputs", "PDB file"], ["outputs", "Distance between first two atoms (\u00c5)"], ["is sourced from", "Python Package (MDAnalysis)"], ["does not need", "Security Check"]], "Distance between first two atoms (\u00c5)": [["is the output of", "CalculateAtomDistance"]], "GetAminoAcidFrequency": [["is a", "Biological Tool"], ["has the functionality that", "Calculates the frequency of each amino acid in a protein sequence"], ["inputs", "protein sequence"], ["outputs", "Amino acid frequencies"], ["is sourced from", "Python Package (Biopython)"], ["does not need", "Security Check"]], "Amino acid frequencies": [["is the output of", "GetAminoAcidFrequency"]], "GetReverseComplement": [["is a", "Biological Tool"], ["has the functionality that", "Generates the reverse complement of a DNA sequence"], ["inputs", "DNA sequence"], ["outputs", "Reverse complement sequence"], ["is sourced from", "Python Package (Biopython)"], ["does not need", "Security Check"]], "Reverse complement sequence": [["is the output of", "GetReverseComplement"]], "CalculateHydrophobicityAndPolarity": [["is a", "Biological Tool"], ["has the functionality that", "Calculates the hydrophobicity and polarity of a protein sequence"], ["inputs", "protein sequence"], ["outputs", "Hydropathy index and estimated isoelectric point (pI)"], ["is sourced from", "Python Package (Biopython)"], ["does not need", "Security Check"]], "Hydropathy index and estimated isoelectric point (pI)": [["is the output of", "CalculateHydrophobicityAndPolarity"]], "PerformBlastQuery": [["is a", "Biological Tool"], ["has the functionality that", "Performs a BLAST query for a given protein sequence using NCBI's BLAST service, limiting results to a maximum number"], ["inputs", "protein sequence"], ["outputs", "BLAST query results"], ["is sourced from", "Python Package (Biopython)"], ["does not need", "Security Check"]], "BLAST query results": [["is the output of", "PerformBlastQuery"]], "NameToSMILES": [["is a", "Chemical Tool"], ["has the functionality that", "Query the corresponding SMILES format based on the molecule name"], ["inputs", "molecule name"], ["outputs", "SMILES"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "molecule name": [["is the input of", "NameToSMILES"]], "RXNPredict": [["is a", "Chemical Tool"], ["has the functionality that", "Predict the product of a chemical reaction between two molecules based on the SMILES of the molecule."], ["inputs", "SMILES pair"], ["outputs", "the outcome of a chemical reaction"], ["is sourced from", "Python Package(rxn4chemistry)"], ["needs", "Security Check"]], "SMILES pair": [["is the input of", "RXNPredict"], ["is the input of", "MolSimilarity"], ["is the input of", "GetFraggleSimilarity"], ["is the input of", "IsSubstructof"], ["is the input of", "GetSubstructMatches"]], "the outcome of a chemical reaction": [["is the output of", "RXNPredict"]], "RXNRetrosynthetic": [["is a", "Chemical Tool"], ["has the functionality that", "Predicts a retrosynthetic pathway for a product SMILES and returns the first pathway with detailed SMILES for each step"], ["inputs", "SMILES"], ["outputs", "retrosynthetic pathway"], ["is sourced from", "Python Package(rxn5chemistry)"], ["needs", "Security Check"]], "retrosynthetic pathway": [["is the output of", "RXNRetrosynthetic"]], "SMILESToWeight": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the molecular weight of a molecule based on SMILES format"], ["inputs", "SMILES"], ["outputs", "molecular weight"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "molecular weight": [["is the output of", "SMILESToWeight"], ["is the output of", "GetExactMolceularWeight"]], "MolSimilarity": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the Tanimoto similarity of two molecules based on their SMILES."], ["inputs", "SMILES pair"], ["outputs", "the score of Tanimoto similarity"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "the score of Tanimoto similarity": [["is the output of", "MolSimilarity"]], "FuncGroups": [["is a", "Chemical Tool"], ["has the functionality that", "Identify and list the functional groups in a molecule based on SMILES format"], ["inputs", "SMILES"], ["outputs", "functional groups"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "functional groups": [["is the output of", "FuncGroups"]], "SafetySummary": [["is a", "Chemical Tool"], ["has the functionality that", "Query the safety information of a given molecule CAS number"], ["inputs", "CAS"], ["outputs", "safety information"], ["is sourced from", "Python Package(chemcrow)"], ["needs", "Security Check"]], "CAS": [["is the input of", "SafetySummary"], ["is the input of", "CheckExplosiveness"], ["is the output of", "SMILESToCAS"], ["is the input of", "CASToPrice"]], "safety information": [["is the output of", "SafetySummary"]], "CheckExplosiveness": [["is a", "Chemical Tool"], ["has the functionality that", "Check the substance for explosive properties according to CAS"], ["inputs", "CAS"], ["outputs", "explosive information"], ["is sourced from", "Python Package(chemcrow)"], ["needs", "Security Check"]], "explosive information": [["is the output of", "CheckExplosiveness"]], "CheckPatent": [["is a", "Chemical Tool"], ["has the functionality that", "Check whether the substance has been patented according to SMILES"], ["inputs", "SMILES"], ["outputs", "patent information"], ["is sourced from", "Python Package(molbloom)"], ["does not need", "Security Check"]], "patent information": [["is the output of", "CheckPatent"]], "ExplainAtomPairScore": [["is a", "Chemical Tool"], ["has the functionality that", "Explains the score of a directly connected atom pair in a molecule."], ["inputs", "SMILES"], ["inputs", "atom index"], ["outputs", "A string explaining the pair score"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "atom index": [["is the input of", "ExplainAtomPairScore"], ["is the input of", "ExplainAtomCode"]], "A string explaining the pair score": [["is the output of", "ExplainAtomPairScore"]], "GetAtomPairFingerprintAsBitVect": [["is a", "Chemical Tool"], ["has the functionality that", "Generates the atom pair fingerprint of a molecule as a SparseBitVect."], ["inputs", "SMILES"], ["outputs", "the bit vector fingerprint"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "the bit vector fingerprint": [["is the output of", "GetAtomPairFingerprintAsBitVect"]], "ExplainAtomCode": [["is a", "Chemical Tool"], ["has the functionality that", "Explains the code of a specific atom in a molecule, including information about chirality"], ["inputs", "SMILES"], ["inputs", "atom index"], ["outputs", "atom's element"], ["outputs", "number of neighbors"], ["outputs", "number of pi electrons"], ["outputs", "and optionally chirality."], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "atom's element": [["is the output of", "ExplainAtomCode"]], "number of neighbors": [["is the output of", "ExplainAtomCode"]], "number of pi electrons": [["is the output of", "ExplainAtomCode"]], "and optionally chirality.": [["is the output of", "ExplainAtomCode"]], "TestMolecule": [["is a", "Chemical Tool"], ["has the functionality that", "Performs a series of tests on a molecule, including sanitization, removal of hydrogens, and a canonicalization check"], ["inputs", "SMILES"], ["outputs", "a confirmation message if the molecule has a valid and consistent structure"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "a confirmation message if the molecule has a valid and consistent structure": [["is the output of", "TestMolecule"]], "AssignPattyTypes": [["is a", "Chemical Tool"], ["has the functionality that", "Assigns Patty types to each atom in a molecule."], ["inputs", "SMILES"], ["outputs", "the Patty types of each atom in the molecule."], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "the Patty types of each atom in the molecule.": [["is the output of", "AssignPattyTypes"]], "ShowMol": [["is a", "Chemical Tool"], ["has the functionality that", "Generates an image of a molecule from its SMILES"], ["inputs", "SMILES"], ["outputs", "image of the molecule"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "image of the molecule": [["is the output of", "ShowMol"]], "TypeAtomsInMolecule": [["is a", "Chemical Tool"], ["has the functionality that", "Assigns EState types to each atom in a molecule as per its SMILES representation."], ["inputs", "SMILES"], ["outputs", "the EState types of atoms"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "the EState types of atoms": [["is the output of", "TypeAtomsInMolecule"]], "ConvertSdfToCsv": [["is a", "Chemical Tool"], ["has the functionality that", "Converts a single SDF file to a CSV file"], ["inputs", "SDF"], ["outputs", "CSV file"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "SDF": [["is the input of", "ConvertSdfToCsv"], ["is the input of", "ExtractRotatableDihedralsFromSdf"], ["is the input of", "CalculateMolecularCenter"], ["is the input of", "CalculateUsrcatScores"]], "CSV file": [["is the output of", "ConvertSdfToCsv"]], "CalculateEstateIndices": [["is a", "Chemical Tool"], ["has the functionality that", "Calculates EState indices for each atom in a molecule using its SMILES representation."], ["inputs", "SMILES"], ["outputs", "the EState indices"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "the EState indices": [["is the output of", "CalculateEstateIndices"]], "CalculateEstateVsa": [["is a", "Chemical Tool"], ["has the functionality that", "Calculates EState VSA (Valuation Surface Area) indices for a molecule based on its SMILES representation."], ["inputs", "SMILES"], ["outputs", "the EState VSA indices"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "the EState VSA indices": [["is the output of", "CalculateEstateVsa"]], "GenerateEstateFingerprint": [["is a", "Chemical Tool"], ["has the functionality that", "Generates the EState fingerprint for a molecule using its SMILES representation"], ["inputs", "SMILES"], ["outputs", "the EState fingerprint"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "the EState fingerprint": [["is the output of", "GenerateEstateFingerprint"]], "ExtractRotatableDihedralsFromSdf": [["is a", "Chemical Tool"], ["has the functionality that", "Extracts rotatable dihedrals from a molecule in an SDF file."], ["inputs", "SDF"], ["outputs", "the indices of atoms forming each rotatable dihedral in the molecule"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "the indices of atoms forming each rotatable dihedral in the molecule": [["is the output of", "ExtractRotatableDihedralsFromSdf"]], "CalculateMolecularCenter": [["is a", "Chemical Tool"], ["has the functionality that", "Calculates the geometric center of a molecule from an SDF file."], ["inputs", "SDF"], ["outputs", "x y and z coordinates of the molecular center"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "x y and z coordinates of the molecular center": [["is the output of", "CalculateMolecularCenter"]], "CalculateFsp3": [["is a", "Chemical Tool"], ["has the functionality that", "Calculates the fraction of SP3 hybridized carbons (FSP3) in a molecule"], ["inputs", "SMILES"], ["outputs", "the FSP3 value"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "the FSP3 value": [["is the output of", "CalculateFsp3"]], "CalculateUsrcatScores": [["is a", "Chemical Tool"], ["has the functionality that", "Calculates USRCAT (Ultrafast Shape Recognition with Creeping Atom Triangles) scores and Tanimoto coefficients for molecules in an SDF file."], ["inputs", "SDF"], ["outputs", "the USRCAT scores"], ["outputs", "Tanimoto coefficients for pairs of molecules"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "the USRCAT scores": [["is the output of", "CalculateUsrcatScores"]], "Tanimoto coefficients for pairs of molecules": [["is the output of", "CalculateUsrcatScores"]], "CalculateShapeSimilarity": [["is a", "Chemical Tool"], ["has the functionality that", "Calculates shape similarity scores using USRCAT for a list of molecules defined by their SMILES strings."], ["inputs", "SMILES list"], ["outputs", "summarizing the SMILES strings"], ["outputs", "their indices"], ["outputs", "the USRCAT scores for each pair of molecules."], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "SMILES list": [["is the input of", "CalculateShapeSimilarity"], ["is the input of", "CalculateDistanceMatrix"], ["is the input of", "ClusterMolecules"], ["is the input of", "FingerprintsFromSmiles"], ["is the output of", "Enumerate"]], "summarizing the SMILES strings": [["is the output of", "CalculateShapeSimilarity"]], "their indices": [["is the output of", "CalculateShapeSimilarity"]], "the USRCAT scores for each pair of molecules.": [["is the output of", "CalculateShapeSimilarity"]], "CalculatePmi": [["is a", "Chemical Tool"], ["has the functionality that", "Calculates the normalized principal moments of inertia (NPR1 and NPR2) for a molecule based on its SMILES representation."], ["inputs", "SMILES"], ["outputs", "the NPR1 value"], ["outputs", "the NPR2 value"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "the NPR1 value": [["is the output of", "CalculatePmi"]], "the NPR2 value": [["is the output of", "CalculatePmi"]], "CalculateDistanceMatrix": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the distance matrix for a list of molecules based on their fingerprints."], ["inputs", "SMILES list"], ["outputs", "the distance matrix"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "the distance matrix": [["is the output of", "CalculateDistanceMatrix"]], "ClusterMolecules": [["is a", "Chemical Tool"], ["has the functionality that", "Clusters molecules based on their fingerprints using a specified clustering algorithm and similarity metric."], ["inputs", "SMILES list"], ["outputs", "clustering results"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "clustering results": [["is the output of", "ClusterMolecules"]], "SMILESToInChI": [["is a", "Chemical Tool"], ["has the functionality that", "Convert SMILES to InChI."], ["inputs", "SMILES"], ["outputs", "InChI"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "InChI": [["is the output of", "SMILESToInChI"], ["is the output of", "InChIKeyToInChI"], ["is the input of", "InChIToInChIKey"], ["is the input of", "InChIToCSID"], ["is the output of", "ConvertSmilesToInchi"], ["is the output of", "GetInchiByMoleculeId"], ["is the output of", "DetermineBondOrders"], ["is the output of", "DetermineBonds"]], "InChIKeyToSMILES": [["is a", "Chemical Tool"], ["has the functionality that", "Resolves InChIKey against ChemSpider database and returns result in SMILES"], ["inputs", "InChIKey"], ["outputs", "SMILES"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "InChIKey": [["is the input of", "InChIKeyToSMILES"], ["is the input of", "InChIKeyToInChI"], ["is the input of", "InChIKeyToMOL"], ["is the input of", "IsValidInChIKey"], ["is the output of", "InChIToInChIKey"], ["is the input of", "InChIKeyToMol"], ["is the output of", "GetInchikeyByMoleculeId"], ["is the output of", "DetermineBondOrders"], ["is the output of", "DetermineBonds"]], "InChIKeyToInChI": [["is a", "Chemical Tool"], ["has the functionality that", "Resolves InChIKey against ChemSpider database and returns result in InChI"], ["inputs", "InChIKey"], ["outputs", "InChI"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "InChIKeyToMOL": [["is a", "Chemical Tool"], ["has the functionality that", "Resolves InChIKey against ChemSpider database and returns result in MOL"], ["inputs", "InChIKey"], ["outputs", "MOL"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "MOL": [["is the output of", "InChIKeyToMOL"], ["is the output of", "InChIKeyToMol"]], "IsValidInChIKey": [["is a", "Chemical Tool"], ["has the functionality that", "Checks that specified argument is valid InChIKey. Works for v1.02b InChIKey only."], ["inputs", "InChIKey"], ["outputs", "True or False"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "InChIToSMILES": [["is a", "Chemical Tool"], ["has the functionality that", "Convert molecules in InCHI format to SMILES"], ["inputs", "InCHI"], ["outputs", "SMILES"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "InCHI": [["is the input of", "InChIToSMILES"]], "InChIToInChIKey": [["is a", "Chemical Tool"], ["has the functionality that", "Convert InChI to InChIKey."], ["inputs", "InChI"], ["outputs", "InChIKey"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "InChIToCSID": [["is a", "Chemical Tool"], ["has the functionality that", "Convert InChI to ChemSpider ID."], ["inputs", "InChI"], ["outputs", "CSID"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "CSID": [["is the output of", "InChIToCSID"]], "SMILEStoSELFIES": [["is a", "Chemical Tool"], ["has the functionality that", "Translates a SMILES string into its corresponding SELFIES string."], ["inputs", "SMILES"], ["outputs", "SELFIES"], ["is sourced from", "Python Package(selfies)"], ["does not need", "Security Check"]], "SELFIEStoSMILES": [["is a", "Chemical Tool"], ["has the functionality that", "Translates a SELFIES string into its corresponding SMILES string."], ["inputs", "SELFIES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(selfies)"], ["does not need", "Security Check"]], "RandomMoelcule": [["is a", "Chemical Tool"], ["has the functionality that", "Generate a random molecule with the length provided."], ["inputs", "length"], ["outputs", "SMILES"], ["outputs", "SELFIES"], ["is sourced from", "Python Package(selfies)"], ["needs", "Security Check"]], "length": [["is the input of", "RandomMoelcule"], ["is the output of", "LengthSELFIES"]], "LengthSELFIES": [["is a", "Chemical Tool"], ["has the functionality that", "calculate the number of symbols in a SELFIES string."], ["inputs", "SELFIES"], ["outputs", "length"], ["is sourced from", "Python Package(selfies)"], ["does not need", "Security Check"]], "SplitSELFIES": [["is a", "Chemical Tool"], ["has the functionality that", "Splits a SELFIES string into its individual tokens."], ["inputs", "SELFIES"], ["outputs", "individual tokens"], ["is sourced from", "Python Package(selfies)"], ["does not need", "Security Check"]], "individual tokens": [["is the output of", "SplitSELFIES"]], "InChIKeyToMol": [["is a", "Chemical Tool"], ["has the functionality that", "Convert InChI to MOL. Uses OpenBabel internally."], ["inputs", "InChIKey"], ["outputs", "MOL"], ["is sourced from", "Python Package(selfies)"], ["does not need", "Security Check"]], "ProcessFingerprintMol": [["is a", "Chemical Tool"], ["has the functionality that", "Represents molecular fingerprints in binary or hexadecimal format"], ["inputs", "SMILES"], ["outputs", "fingerprints"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "fingerprints": [["is the output of", "ProcessFingerprintMol"]], "FingerprintsFromSmiles": [["is a", "Chemical Tool"], ["has the functionality that", "Generate fingerprints for a list of SMILES strings."], ["inputs", "SMILES list"], ["outputs", "fingerprints list"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "fingerprints list": [["is the output of", "FingerprintsFromSmiles"]], "FoldFingerprintFromSmiles": [["is a", "Chemical Tool"], ["has the functionality that", "Generate a fingerprint from a SMILES string, fold it using a provided function, and provide detailed information."], ["inputs", "SMILES"], ["outputs", "fingerprint details"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "fingerprint details": [["is the output of", "FoldFingerprintFromSmiles"]], "GetRdkFingerprintFromSmiles": [["is a", "Chemical Tool"], ["has the functionality that", "Generate an RDKit fingerprint from a SMILES string using default parameters."], ["inputs", "SMILES"], ["outputs", "fingerprint"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "fingerprint": [["is the output of", "GetRdkFingerprintFromSmiles"], ["is the output of", "GetPatternFingerprintTemplate"]], "GetFraggleSimilarity": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the Fraggle similarity between two molecules represented by SMILES strings."], ["inputs", "SMILES pair"], ["outputs", "Fraggle similarity"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Fraggle similarity": [["is the output of", "GetFraggleSimilarity"]], "GenerateFraggleFragments": [["is a", "Chemical Tool"], ["has the functionality that", "Generate all possible Fraggle fragmentations for a molecule represented by a SMILES string."], ["inputs", "SMILES"], ["outputs", "Fraggle fragmentations"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Fraggle fragmentations": [["is the output of", "GenerateFraggleFragments"]], "CheckValidRingCut": [["is a", "Chemical Tool"], ["has the functionality that", "Check if the molecule represented by a SMILES string is a valid ring cut."], ["inputs", "SMILES"], ["outputs", "True or False"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "BuildAtomPairFpFromSmiles": [["is a", "Chemical Tool"], ["has the functionality that", "Generate an Atom Pair Fingerprint from a SMILES string and display the results in a readable format."], ["inputs", "SMILES"], ["outputs", "Atom Pair Fingerprint"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Atom Pair Fingerprint": [["is the output of", "BuildAtomPairFpFromSmiles"]], "BuildTorsionsFpFromSmiles": [["is a", "Chemical Tool"], ["has the functionality that", "Generate a Torsions Fingerprint from a SMILES string."], ["inputs", "SMILES"], ["outputs", "Torsions Fingerprint"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Torsions Fingerprint": [["is the output of", "BuildTorsionsFpFromSmiles"]], "BuildRdkitFpFromSmiles": [["is a", "Chemical Tool"], ["has the functionality that", "Generate an RDKit fingerprint from a SMILES string."], ["inputs", "SMILES"], ["outputs", "RDKit fingerprint"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "RDKit fingerprint": [["is the output of", "BuildRdkitFpFromSmiles"]], "BuildPharm2DFpFromSmiles": [["is a", "Chemical Tool"], ["has the functionality that", "Generate a Pharm2D fingerprint from a SMILES string."], ["inputs", "SMILES"], ["outputs", "Pharm2D fingerprint"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Pharm2D fingerprint": [["is the output of", "BuildPharm2DFpFromSmiles"]], "BuildMorganFpFromSmiles": [["is a", "Chemical Tool"], ["has the functionality that", "Generate a Morgan fingerprint from a SMILES string."], ["inputs", "SMILES"], ["outputs", "Morgan fingerprint"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Morgan fingerprint": [["is the output of", "BuildMorganFpFromSmiles"], ["is the output of", "GetMorganFingerprint"]], "BuildAvalonFpFromSmiles": [["is a", "Chemical Tool"], ["has the functionality that", "Generate an Avalon fingerprint from a SMILES string."], ["inputs", "SMILES"], ["outputs", "Avalon fingerprint"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Avalon fingerprint": [["is the output of", "BuildAvalonFpFromSmiles"]], "ConvertSmilesToInchi": [["is a", "Chemical Tool"], ["has the functionality that", "Converts a SMILES string to its corresponding InChI string."], ["inputs", "SMILES"], ["outputs", "InChI"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "GenerateMolKeyFromSmiles": [["is a", "Chemical Tool"], ["has the functionality that", "Generates a molecular key for a given molecule represented by a SMILES string."], ["inputs", "SMILES"], ["outputs", "molecular key"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "molecular key": [["is the output of", "GenerateMolKeyFromSmiles"]], "GetStereoCodeFromSmiles": [["is a", "Chemical Tool"], ["has the functionality that", "Generates the stereo code for a given molecule represented by a SMILES string."], ["inputs", "SMILES"], ["outputs", "stereo code"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "stereo code": [["is the output of", "GetStereoCodeFromSmiles"]], "GetChargeByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the charge of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "charge"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "molecule_id": [["is the input of", "GetChargeByMoleculeId"], ["is the input of", "GetSpinMultiplicityByMoleculeId"], ["is the input of", "GetNatomsByMoleculeId"], ["is the input of", "GetElementsByMoleculeId"], ["is the input of", "GetNelementsByMoleculeId"], ["is the input of", "GetNelectronsByMoleculeId"], ["is the input of", "GetCompositionByMoleculeId"], ["is the input of", "GetFormulaAlphabeticalByMoleculeId"], ["is the input of", "GetFormulaPrettyByMoleculeId"], ["is the input of", "GetFormulaAnonymousByMoleculeId"], ["is the input of", "GetChemsysByMoleculeId"], ["is the input of", "GetSymmetryByMoleculeId"], ["is the input of", "GetPropertyNameByMoleculeId"], ["is the input of", "GetPropertyIdByMoleculeId"], ["is the input of", "GetDeprecatedByMoleculeId"], ["is the input of", "GetDeprecationReasonsByMoleculeId"], ["is the input of", "GetLevelOfTheoryByMoleculeId"], ["is the input of", "GetSolventByMoleculeId"], ["is the input of", "GetLotSolventByMoleculeId"], ["is the input of", "GetLastUpdatedTimeByMoleculeId"], ["is the input of", "GetWarningsByMoleculeId"], ["is the input of", "GetOriginsByMoleculeId"], ["is the output of", "GetMoleculeIdByFormula"], ["is the input of", "GetMoleculeLevelsOfTheoryByMoleculeId"], ["is the input of", "GetSpeciesHashByMoleculeId"], ["is the input of", "GetCoordHashByMoleculeId"], ["is the input of", "GetInchiByMoleculeId"], ["is the input of", "GetInchikeyByMoleculeId"], ["is the input of", "GetSimilarMoleculesByMoleculeId"], ["is the input of", "GetConstituentMoleculesByMoleculeId"], ["is the output of", "GetConstituentMoleculesByMoleculeId"], ["is the input of", "GetUniqueCalcTypesByMoleculeId"], ["is the input of", "GetUniqueTaskTypesByMoleculeId"], ["is the input of", "GetUniqueLevelsOfTheoryByMoleculeId"], ["is the input of", "GetUniqueSolventsByMoleculeId"], ["is the input of", "GetUniqueLotSolventsByMoleculeId"], ["is the input of", "GetThermoPropertyIdsByMoelculeId"], ["is the input of", "GetThermoLevelsOfTheoryByMoleculeId"], ["is the input of", "GetElectronicEnergyByMoelculeId"], ["is the input of", "GetZeroPointEnergyByMoleculeId"], ["is the input of", "GetTotalEnthalpyByMoleculeId"], ["is the input of", "GetTotalEntropyByMoleculeId"], ["is the input of", "GetTranslationalEnthalpyByMoleculeId"], ["is the input of", "GetTranslationalEntropyByMoleculeId"], ["is the input of", "GetRotationalEnthalpyByMoleculeId"], ["is the input of", "GetRotationalEntropyByMoleculeId"], ["is the input of", "GetVibrationalEnthalpyByMoleculeId"], ["is the input of", "GetVibrationalEnthalpyByMoelculeId"], ["is the input of", "GetVibrationalEntropyByMoleculeId"], ["is the input of", "GetFreeEnergyByMoleculeId"], ["is the input of", "GetVibrationPropertyIdsByMoleculeId"], ["is the input of", "GetVibrationLevelsOfTheoryByMoleculeId"], ["is the input of", "GetFrequenciesByMoleculeId"], ["is the input of", "GetFrequencyModesByMoleculeId"], ["is the input of", "GetIrIntensitiesByMoleculeId"], ["is the input of", "GetIrActivitiesByMoleculeId"], ["is the input of", "GetOrbitalsPropertyIdsByMoleculeId"], ["is the input of", "GetOrbitalsLevelsOfTheoryByMoleculeId"], ["is the input of", "GetOpenShellByMoleculeId"], ["is the input of", "GetNboPopulationByMoleculeId"]], "charge": [["is the output of", "GetChargeByMoleculeId"]], "GetSpinMultiplicityByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the spin multiplicity of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "spin multiplicity"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "spin multiplicity": [["is the output of", "GetSpinMultiplicityByMoleculeId"]], "GetNatomsByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the number of atoms of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "Number of atoms"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Number of atoms": [["is the output of", "GetNatomsByMoleculeId"], ["is the output of", "DetermineBondOrders"], ["is the output of", "DetermineBonds"], ["is the output of", "GetAtomsNum"]], "GetElementsByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the elements of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "elements"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "elements": [["is the output of", "GetElementsByMoleculeId"], ["is the input of", "SearchMaterialsContainingElements"], ["is the output of", "GetElementsByMaterialId"], ["is the output of", "GetElementsByBatteryId"]], "GetNelementsByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the nelements of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "number of elements"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "number of elements": [["is the output of", "GetNelementsByMoleculeId"], ["is the output of", "GetNumberOfElementsByMaterialId"], ["is the output of", "GetNelementsByBatteryId"]], "GetNelectronsByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the number of electrons of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "number of electrons"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "number of electrons": [["is the output of", "GetNelectronsByMoleculeId"]], "GetCompositionByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the composition of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "composition"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "composition": [["is the output of", "GetCompositionByMoleculeId"]], "GetFormulaAlphabeticalByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the alphabetical formula of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "alphabetical formula"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "alphabetical formula": [["is the output of", "GetFormulaAlphabeticalByMoleculeId"]], "GetFormulaPrettyByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the pretty formula of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "pretty formula"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "pretty formula": [["is the output of", "GetFormulaPrettyByMoleculeId"], ["is the output of", "GetFormulaPrettyByMaterialId"]], "GetFormulaAnonymousByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the anonymous formula of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "anonymous formula"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "anonymous formula": [["is the output of", "GetFormulaAnonymousByMoleculeId"], ["is the output of", "GetFormulaAnonymousByMaterialId"], ["is the output of", "GetFormulaAnonymousByFormula"], ["is the output of", "GetFormulaAnonymousByBatteryId"]], "GetChemsysByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the chemical system of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "chemical system"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "chemical system": [["is the output of", "GetChemsysByMoleculeId"], ["is the output of", "GetChemicalSystemByMaterialId"], ["is the output of", "GetChemsysByBatteryId"]], "GetSymmetryByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the symmetry of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "symmetry"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "symmetry": [["is the output of", "GetSymmetryByMoleculeId"], ["is the output of", "GetSymmetryByMaterialId"]], "GetPropertyNameByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the property name of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "property name"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "property name": [["is the output of", "GetPropertyNameByMoleculeId"], ["is the output of", "GetPropertyNameByMaterialId"]], "GetPropertyIdByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the property id of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "property id"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "property id": [["is the output of", "GetPropertyIdByMoleculeId"]], "GetDeprecatedByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the deprecated status of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "Deprecated Status"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Deprecated Status": [["is the output of", "GetDeprecatedByMoleculeId"]], "GetDeprecationReasonsByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the deprecation reasons of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "deprecation reasons"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "deprecation reasons": [["is the output of", "GetDeprecationReasonsByMoleculeId"], ["is the output of", "GetDeprecatedReasonsByBatteryId"]], "GetLevelOfTheoryByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the level of theory of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "level of theory"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "level of theory": [["is the output of", "GetLevelOfTheoryByMoleculeId"]], "GetSolventByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the solvent of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "solvent"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "solvent": [["is the output of", "GetSolventByMoleculeId"]], "GetLotSolventByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the solvent lot of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "solvent lot"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "solvent lot": [["is the output of", "GetLotSolventByMoleculeId"]], "GetLastUpdatedTimeByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the last updated time of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "last updated time"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "last updated time": [["is the output of", "GetLastUpdatedTimeByMoleculeId"], ["is the output of", "GetLastUpdatedTimeByTaskId"]], "GetWarningsByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the warnings of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "warnings"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "warnings": [["is the output of", "GetWarningsByMoleculeId"], ["is the output of", "GetWarningsByBatteryId"]], "GetOriginsByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the origins of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "origins"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "origins": [["is the output of", "GetOriginsByMoleculeId"], ["is the output of", "GetOriginsByMaterialId"]], "GetMoleculeIdByFormula": [["is a", "Chemical Tool"], ["has the functionality that", "Get the molecule ID of a molecule by its formula"], ["inputs", "Molecule Formula"], ["outputs", "molecule_id"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Molecule Formula": [["is the input of", "GetMoleculeIdByFormula"], ["is the output of", "GetMolFormula"], ["is the output of", "GetFormulaByMaterialId"], ["is the input of", "GetMaterialIdByFormula"], ["is the input of", "GetBandGapByFormula"], ["is the input of", "GetVolumeByFormula"], ["is the input of", "GetDensityByFormula"], ["is the input of", "GetDensityAtomicByFormula"], ["is the input of", "GetInitialStructuresByFormula"], ["is the input of", "SearchXasByFormula"], ["is the input of", "GetCbmByFormula"], ["is the input of", "GetEnergyPerAtomByFormula"], ["is the input of", "GetEfermiByFormula"], ["is the input of", "GetFormationEnergyPerAtomByFormula"], ["is the input of", "GetETotalByFormula"], ["is the input of", "GetEIonicByFormula"], ["is the input of", "GetEElectronicByFormula"], ["is the input of", "GetFormulaAnonymousByFormula"], ["is the input of", "IsMagneticByFormula"], ["is the input of", "IsMetalByFormula"], ["is the input of", "IsStableByFormula"]], "GetMoleculeLevelsOfTheoryByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the molecule levels of theory of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "Molecule Levels of Theory"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Molecule Levels of Theory": [["is the output of", "GetMoleculeLevelsOfTheoryByMoleculeId"]], "GetSpeciesHashByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the species hash of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "Species Hash"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Species Hash": [["is the output of", "GetSpeciesHashByMoleculeId"]], "GetCoordHashByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the coord hash of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "Coord Hash"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Coord Hash": [["is the output of", "GetCoordHashByMoleculeId"]], "GetInchiByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the InChI of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "InChI"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetInchikeyByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the InChIKey of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "InChIKey"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetSimilarMoleculesByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the similar molecules of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "material_id"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "material_id": [["is the output of", "GetSimilarMoleculesByMoleculeId"], ["is the output of", "SearchMaterialsContainingElements"], ["is the output of", "SearchMaterialsByChemsys"], ["is the input of", "GetDocByMaterialId"], ["is the input of", "GetFormulaByMaterialId"], ["is the output of", "GetMaterialIdByFormula"], ["is the input of", "GetBandGapByMaterialId"], ["is the input of", "GetVolumeByMaterialId"], ["is the input of", "GetDensityByMaterialId"], ["is the input of", "GetDensityAtomicByMaterialId"], ["is the input of", "GetEnergyAboveHullByMaterialId"], ["is the input of", "GetInitialStructuresByMaterialId"], ["is the input of", "GetStructureByMaterialId"], ["is the output of", "SearchByBandGap"], ["is the input of", "GetCbmByMaterialId"], ["is the input of", "GetEnergyPerAtomByMaterialId"], ["is the input of", "GetEfermiByMaterialId"], ["is the input of", "GetVbmByMaterialId"], ["is the input of", "GetVbmByFormula"], ["is the input of", "GetFormationEnergyPerAtomByMaterialId"], ["is the input of", "GetETotalByMaterialId"], ["is the input of", "GetEIonicByMaterialId"], ["is the input of", "GetEElectronicByMaterialId"], ["is the input of", "GetEquilibriumReactionEnergyPerAtom"], ["is the input of", "GetFormulaAnonymousByMaterialId"], ["is the input of", "IsMagneticByMaterialId"], ["is the input of", "IsMetalByMaterialId"], ["is the input of", "IsStableByMaterialId"], ["is the input of", "GetNumMagneticSitesByMaterialId"], ["is the input of", "GetTotalMagnetizationByMaterialId"], ["is the input of", "GetTotalMagnetizationNormalizedFormulaUnitsByMaterialId"], ["is the input of", "GetTotalMagnetizationNormalizedVolByMaterialId"], ["is the input of", "GetUncorrectedEnergyPerAtomByMaterialId"], ["is the input of", "GetEosInfoByMaterialId"], ["is the input of", "GetPhononInfoByMaterialId"], ["is the input of", "GetCrystalStructureByMaterialId"], ["is the input of", "GetAtomicPositionsMaterialId"], ["is the input of", "GetMagnetismInfoByMaterialId"], ["is the input of", "GetCompositionByMaterialId"], ["is the input of", "GetPhysicalPropertiesByMaterialId"], ["is the input of", "GetNsitesByMaterialId"], ["is the input of", "GetElementsByMaterialId"], ["is the input of", "GetNumberOfElementsByMaterialId"], ["is the input of", "GetDielectricByMaterialId"], ["is the input of", "GetCrystalSystemByMaterialId"], ["is the input of", "GetChemicalSystemByMaterialId"], ["is the input of", "GetSpaceGroupSymbolByMaterialId"], ["is the input of", "GetFormulaPrettyByMaterialId"], ["is the input of", "GetSurfaceAnisotropyByMaterialId"], ["is the input of", "GetStructureByMaterialId"], ["is the input of", "GetWeightedSurfaceEnergyByMaterialId"], ["is the output of", "GetRobocrystallographerData"], ["is the input of", "GetDescriptionByMaterialId"], ["is the output of", "GetMaterialIdByBatteryId"], ["is the input of", "IsDeprecated"], ["is the input of", "GetDeprecatedReasonsByBatteryId"], ["is the input of", "GetPossibleSpeciesByMaterialId"], ["is the input of", "GetPossibleValencesByMaterialId"], ["is the input of", "GetAverageOxidationStatesByMaterialId"], ["is the input of", "GetPropertyNameByMaterialId"], ["is the input of", "GetOxidationStateMethodByMaterialId"], ["is the input of", "GetSymmetryByMaterialId"], ["is the input of", "GetCreatedTimeByMaterialId"], ["is the input of", "GetReferencesByMaterialId"], ["is the input of", "GetAuthorsByMaterialId"], ["is the input of", "GetRemarksByMaterialId"], ["is the input of", "GetAlloyPairsByMaterialId"], ["is the input of", "GetPairIdByMaterialId"], ["is the input of", "GetBondInfoByMaterialId"], ["is the input of", "GetBondTypesByMaterialId"], ["is the input of", "GetBondLengthStatsByMaterialId"], ["is the input of", "GetCoordinationEnvsByMaterialId"], ["is the input of", "GetOriginsByMaterialId"], ["is the input of", "GetCoordinationEnvsAnonymousByMaterialId"], ["is the input of", "GetStructureGraphByMaterialId"]], "GetConstituentMoleculesByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the constituent molecules of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "molecule_id"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetUniqueCalcTypesByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the unique calculation types of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "Unique Calculation Types"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Unique Calculation Types": [["is the output of", "GetUniqueCalcTypesByMoleculeId"]], "GetUniqueTaskTypesByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the unique task types of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "Unique Task Types"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Unique Task Types": [["is the output of", "GetUniqueTaskTypesByMoleculeId"]], "GetUniqueLevelsOfTheoryByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the unique levels of theory of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "Unique Levels of Theory"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Unique Levels of Theory": [["is the output of", "GetUniqueLevelsOfTheoryByMoleculeId"]], "GetUniqueSolventsByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the unique solvents of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "Unique Solvents"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Unique Solvents": [["is the output of", "GetUniqueSolventsByMoleculeId"]], "GetUniqueLotSolventsByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the unique lot solvents of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "Unique Lot Solvents"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Unique Lot Solvents": [["is the output of", "GetUniqueLotSolventsByMoleculeId"]], "GetThermoPropertyIdsByMoelculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the thermo property ids of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "Thermo Property IDs"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Thermo Property IDs": [["is the output of", "GetThermoPropertyIdsByMoelculeId"]], "GetThermoLevelsOfTheoryByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the thermo levels of theory of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "Thermo Levels of Theory"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Thermo Levels of Theory": [["is the output of", "GetThermoLevelsOfTheoryByMoleculeId"]], "GetElectronicEnergyByMoelculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the electronic energy of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "electronnic energy"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "electronnic energy": [["is the output of", "GetElectronicEnergyByMoelculeId"], ["is the output of", "GetEElectronicByMaterialId"], ["is the output of", "GetEElectronicByFormula"]], "GetZeroPointEnergyByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the zero point energy of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "zero point energy"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "zero point energy": [["is the output of", "GetZeroPointEnergyByMoleculeId"]], "GetTotalEnthalpyByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the total enthalpy of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "total enthalpy"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "total enthalpy": [["is the output of", "GetTotalEnthalpyByMoleculeId"]], "GetTotalEntropyByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the total entropy of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "total entropy"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "total entropy": [["is the output of", "GetTotalEntropyByMoleculeId"]], "GetTranslationalEnthalpyByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the translational enthalpy of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "translational enthalpy"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "translational enthalpy": [["is the output of", "GetTranslationalEnthalpyByMoleculeId"]], "GetTranslationalEntropyByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the translational entropy of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "translational entropy"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "translational entropy": [["is the output of", "GetTranslationalEntropyByMoleculeId"]], "GetRotationalEnthalpyByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the rotational enthalpy of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "rotational enthalpy"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "rotational enthalpy": [["is the output of", "GetRotationalEnthalpyByMoleculeId"]], "GetRotationalEntropyByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the rotational entropy of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "rotational entropy"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "rotational entropy": [["is the output of", "GetRotationalEntropyByMoleculeId"]], "GetVibrationalEnthalpyByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the vibrational enthalpy of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "vibrational enthalpy"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "vibrational enthalpy": [["is the output of", "GetVibrationalEnthalpyByMoleculeId"], ["is the output of", "GetVibrationalEnthalpyByMoelculeId"]], "GetVibrationalEnthalpyByMoelculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the vibrational enthalpy of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "vibrational enthalpy"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetVibrationalEntropyByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the vibrational entropy of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "vibrational entropy"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "vibrational entropy": [["is the output of", "GetVibrationalEntropyByMoleculeId"]], "GetFreeEnergyByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the free energy of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "free energy"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "free energy": [["is the output of", "GetFreeEnergyByMoleculeId"]], "GetVibrationPropertyIdsByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the vibration property ids of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "vibration property ids"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "vibration property ids": [["is the output of", "GetVibrationPropertyIdsByMoleculeId"]], "GetVibrationLevelsOfTheoryByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the vibration levels of theory of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "vibration levels of theory"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "vibration levels of theory": [["is the output of", "GetVibrationLevelsOfTheoryByMoleculeId"]], "GetFrequenciesByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the frequencies of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "frequencies"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "frequencies": [["is the output of", "GetFrequenciesByMoleculeId"]], "GetFrequencyModesByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the frequency modes of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "frequency modes"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "frequency modes": [["is the output of", "GetFrequencyModesByMoleculeId"]], "GetIrIntensitiesByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the ir intensities of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "ir intensities"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "ir intensities": [["is the output of", "GetIrIntensitiesByMoleculeId"]], "GetIrActivitiesByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the ir activities of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "ir activities"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "ir activities": [["is the output of", "GetIrActivitiesByMoleculeId"]], "GetOrbitalsPropertyIdsByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the orbitals property ids of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "orbitals property ids"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "orbitals property ids": [["is the output of", "GetOrbitalsPropertyIdsByMoleculeId"]], "GetOrbitalsLevelsOfTheoryByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the orbitals levels of theory of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "orbitals levels of theory"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "orbitals levels of theory": [["is the output of", "GetOrbitalsLevelsOfTheoryByMoleculeId"]], "GetOpenShellByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the open shell of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "open shell"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "open shell": [["is the output of", "GetOpenShellByMoleculeId"]], "GetNboPopulationByMoleculeId": [["is a", "Chemical Tool"], ["has the functionality that", "Get the Natural Bond Orbital(nbo) population of a molecule by its molecule_id"], ["inputs", "molecule_id"], ["outputs", "Natural Bond Orbital(nbo) population"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Natural Bond Orbital(nbo) population": [["is the output of", "GetNboPopulationByMoleculeId"]], "GetPatternFingerprintTemplate": [["is a", "Chemical Tool"], ["has the functionality that", "Generate a pattern fingerprint for a molecule"], ["inputs", "SMILES"], ["outputs", "fingerprint"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "GetExactMolceularWeight": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the exact molecular weight of a molecule"], ["inputs", "SMILES"], ["outputs", "molecular weight"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "GenerateRDKFingerprintsFromCSV": [["is a", "Chemical Tool"], ["has the functionality that", "Generate RDKfingerprints for the SMILES strings in a csv file and save to a new csv file"], ["inputs", "CSV file with SMILES"], ["outputs", "CSV file with RDKfingerprints"], ["is sourced from", "Custom Tool"], ["does not need", "Security Check"]], "CSV file with SMILES": [["is the input of", "GenerateRDKFingerprintsFromCSV"], ["is the input of", "GenerateMorganfingerprintsFromCSV"], ["is the input of", "GenerateElectricalDescriptorsFromCSV"]], "CSV file with RDKfingerprints": [["is the output of", "GenerateRDKFingerprintsFromCSV"]], "GenerateMorganfingerprintsFromCSV": [["is a", "Chemical Tool"], ["has the functionality that", "Generate morgan fingerprints for the SMILES strings in a CSV file and save to a new CSV file."], ["inputs", "CSV file with SMILES"], ["outputs", "CSV file with Morgan fingerprints"], ["is sourced from", "Custom Tool"], ["does not need", "Security Check"]], "CSV file with Morgan fingerprints": [["is the output of", "GenerateMorganfingerprintsFromCSV"]], "GenerateElectricalDescriptorsFromCSV": [["is a", "Chemical Tool"], ["has the functionality that", "Generate RDKfingerprints for the SMILES strings in a CSV file and save to a new CSV file."], ["inputs", "CSV file with SMILES"], ["outputs", "CSV file with electrical descriptors"], ["is sourced from", "Custom Tool"], ["does not need", "Security Check"]], "CSV file with electrical descriptors": [["is the output of", "GenerateElectricalDescriptorsFromCSV"]], "MLPClassifier": [["is a", "Chemical Tool"], ["has the functionality that", "A machine learning algorithm with an MLP classifier function predicts reactivity based on the processed feature file."], ["inputs", "CSV file with fingerprint or descriptors"], ["outputs", "Prediction accuracy of MLP"], ["is sourced from", "Custom Tool"], ["does not need", "Security Check"]], "CSV file with fingerprint or descriptors": [["is the input of", "MLPClassifier"], ["is the input of", "AdaBoostClassifier"], ["is the input of", "RandomForestClassifier"]], "Prediction accuracy of MLP": [["is the output of", "MLPClassifier"]], "AdaBoostClassifier": [["is a", "Chemical Tool"], ["has the functionality that", "A machine learning algorithm with an AdaBoost classifier function predicts reactivity based on the processed feature file."], ["inputs", "CSV file with fingerprint or descriptors"], ["outputs", "Prediction accuracy of AdaBoost"], ["is sourced from", "Custom Tool"], ["does not need", "Security Check"]], "Prediction accuracy of AdaBoost": [["is the output of", "AdaBoostClassifier"]], "RandomForestClassifier": [["is a", "Chemical Tool"], ["has the functionality that", "A machine learning algorithm with an Random Forest classifier function predicts reactivity based on the processed feature file."], ["inputs", "CSV file with fingerprint or descriptors"], ["outputs", "Prediction accuracy of RandomForest"], ["is sourced from", "Custom Tool"], ["does not need", "Security Check"]], "Prediction accuracy of RandomForest": [["is the output of", "RandomForestClassifier"]], "RunSuZuKiReactionExperiment": [["is a", "Chemical Tool"], ["has the functionality that", "Iteratively optimize the condition parameters of the Suzuki experiment through Bayesian optimization to improve the yield of the reaction and provide the corresponding experimental conditions."], ["inputs", "Number of iterations"], ["outputs", "Yield"], ["is sourced from", "Custom Tool"], ["does not need", "Security Check"]], "Number of iterations": [["is the input of", "RunSuZuKiReactionExperiment"]], "Yield": [["is the output of", "RunSuZuKiReactionExperiment"]], "DetermineBondOrders": [["is a", "Chemical Tool"], ["has the functionality that", "Aassigns atomic connectivity to a molecule based on its atomic coordinates, without considering pre-existing bonds. It determines the bond orders between atoms in the molecule."], ["inputs", "SMILES"], ["outputs", "Number of atoms"], ["outputs", "Number of bonds"], ["outputs", "Molecule formula"], ["outputs", "Molecule weight"], ["outputs", "SMILES"], ["outputs", "InChI"], ["outputs", "InChIKey"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of bonds": [["is the output of", "DetermineBondOrders"], ["is the output of", "DetermineBonds"]], "Molecule formula": [["is the output of", "DetermineBondOrders"]], "Molecule weight": [["is the output of", "DetermineBondOrders"]], "DetermineBonds": [["is a", "Chemical Tool"], ["has the functionality that", "Aassigns atomic connectivity to a molecule based on its atomic coordinates, regardless of pre-existing bonds, using various methods such as extended Hueckel theory, van der Waals, or connect-the-dots. It also allows for the inclusion of charge, chiral information, and atom mapping."], ["inputs", "SMILES"], ["outputs", "Number of atoms"], ["outputs", "Number of bonds"], ["outputs", "Molecular formula"], ["outputs", "Molecular weight"], ["outputs", "SMILES"], ["outputs", "InChI"], ["outputs", "InChIKey"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Molecular formula": [["is the output of", "DetermineBonds"]], "Molecular weight": [["is the output of", "DetermineBonds"]], "GetPatternFingerprint": [["is a", "Chemical Tool"], ["has the functionality that", "Generate a pattern fingerprint for a molecule. The pattern fingerprint is a bit vector that encodes the presence or absence of particular substructures in the molecule. The substructures are defined by SMARTS patterns. The SMARTS patterns are converted to molecular fingerprints and then combined to generate the pattern fingerprint."], ["inputs", "SMILES"], ["outputs", "BitVector"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "BitVector": [["is the output of", "GetPatternFingerprint"]], "IsSubstructof": [["is a", "Chemical Tool"], ["has the functionality that", "Check if a molecule(target) is a substructure of another molecule(template)."], ["inputs", "SMILES pair"], ["outputs", "True or False"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "GetTemplateMolecule": [["is a", "Chemical Tool"], ["has the functionality that", "Get the template molecule from a TautomerQuery object."], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "GetTautomers": [["is a", "Chemical Tool"], ["has the functionality that", "Obtain all possible tautomers of a molecule"], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "GetModifiedAtoms": [["is a", "Chemical Tool"], ["has the functionality that", "Get the modified atoms of a TautomerQuery object "], ["inputs", "SMILES"], ["outputs", "Atoms"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Atoms": [["is the output of", "GetModifiedAtoms"]], "GetModifiedBonds": [["is a", "Chemical Tool"], ["has the functionality that", "Get the modified bonds of a TautomerQuery object "], ["inputs", "SMILES"], ["outputs", "Bonds"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Bonds": [["is the output of", "GetModifiedBonds"]], "GetSubstructMatches": [["is a", "Chemical Tool"], ["has the functionality that", "Search for substructures in a given target molecule that match the tautomer query"], ["inputs", "SMILES pair"], ["outputs", "Matches list"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Matches list": [["is the output of", "GetSubstructMatches"]], "CanSerialize": [["is a", "Chemical Tool"], ["has the functionality that", "Check if a molecule can be serialized. "], ["inputs", "SMILES"], ["outputs", "True or False"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "AssignCIPLabels": [["is a", "Chemical Tool"], ["has the functionality that", "Assign CIP labels to the atoms in a molecule"], ["inputs", "SMILES"], ["outputs", "SMILES or Bond types"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "SMILES or Bond types": [["is the output of", "AssignCIPLabels"]], "Enumerate": [["is a", "Chemical Tool"], ["has the functionality that", "Perform enumeration on a given molecule and returns a MolBundle object containing multiple molecules generated during the enumeration process "], ["inputs", "SMILES"], ["outputs", "SMILES list"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Deprotect": [["is a", "Chemical Tool"], ["has the functionality that", "Remove protecting groups from a molecule, returning the deprotected version"], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "CondenseAbbreviationSubstanceGroups": [["is a", "Chemical Tool"], ["has the functionality that", "Find and replace abbreviation substance groups in a molecule, resulting in a compressed version of the molecule where the abbreviations are expanded"], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "SlnToSmiles": [["is a", "Chemical Tool"], ["has the functionality that", "Convert a SLN string to a SMILES string "], ["inputs", "SLN"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "SLN": [["is the input of", "SlnToSmiles"]], "CreateShingling": [["is a", "Chemical Tool"], ["has the functionality that", "Create a shingling for a molecule. "], ["inputs", "SMILES"], ["outputs", "Shingling"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Shingling": [["is the output of", "CreateShingling"]], "EncodeMolecule": [["is a", "Chemical Tool"], ["has the functionality that", "Create an MHFP vector from a molecule  using MHFP encoder, capturing structural information of the molecule"], ["inputs", "SMILES"], ["outputs", "MHFP"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "MHFP": [["is the output of", "EncodeMolecule"]], "EncodeSECFP": [["is a", "Chemical Tool"], ["has the functionality that", "Creates an SECFP vector from a molecule using SECFP encoder, capturing structural information of the molecule "], ["inputs", "SMILES"], ["outputs", "SECFP"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "SECFP": [["is the output of", "EncodeSECFP"]], "GetBCUT": [["is a", "Chemical Tool"], ["has the functionality that", "Compute the 2D BCUT descriptors for a given molecule, representing mass, Gasteiger charge, Crippen logP, and Crippen MR values. "], ["inputs", "SMILES"], ["outputs", "BCUT2D"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "BCUT2D": [["is the output of", "GetBCUT"]], "GetAutocorrelation2D": [["is a", "Chemical Tool"], ["has the functionality that", "Computs the 2D autocorrelation descriptors for a given molecule, capturing the spatial arrangement of atoms in the molecule. "], ["inputs", "SMILES"], ["outputs", "2D Autocorrelation descriptors"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "2D Autocorrelation descriptors": [["is the output of", "GetAutocorrelation2D"]], "GetAutocorrelation3D": [["is a", "Chemical Tool"], ["has the functionality that", "Computes the 3D autocorrelation descriptors for a given molecule, capturing the spatial arrangement of atoms in the molecule. "], ["inputs", "SMILES"], ["outputs", "3D Autocorrelation Descriptors"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "3D Autocorrelation Descriptors": [["is the output of", "GetAutocorrelation3D"]], "GetAsphericity": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the asphericity descriptor for a molecule, which measures how much the molecule deviates from a perfectly spherical shape. "], ["inputs", "SMILES"], ["outputs", "Asphericity"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Asphericity": [["is the output of", "GetAsphericity"]], "GetChi0n": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the chi^0 (chi-zero) cluster index, which represents a topological descriptor related to molecular branching"], ["inputs", "SMILES"], ["outputs", "Chi-zero Cluster Index"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Chi-zero Cluster Index": [["is the output of", "GetChi0n"]], "GetChi0v": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the Chi^0v (Chi-zero-v) valence molecular graph index for a molecule, which is used to describe the topology of the molecule. It returns a float value. "], ["inputs", "SMILES"], ["outputs", "Chi-zero-v valence molecular graph index "], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Chi-zero-v valence molecular graph index ": [["is the output of", "GetChi0v"]], "GetChi1n": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the chi^1 (chi-one) cluster index, which represents a topological descriptor related to molecular branching. "], ["inputs", "SMILES"], ["outputs", "Chi-one Cluster Index"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Chi-one Cluster Index": [["is the output of", "GetChi1n"]], "GetChi1v": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the Chi^1v (Chi-one-v) valence molecular graph index for a molecule, which is used to describe the topology of the molecule. It returns a float value. "], ["inputs", "SMILES"], ["outputs", "Chi-one-v valence molecular graph index "], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Chi-one-v valence molecular graph index ": [["is the output of", "GetChi1v"]], "GetChi2n": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the chi^2 (chi-two) cluster index, which represents a topological descriptor related to molecular branching. "], ["inputs", "SMILES"], ["outputs", "Chi-two Cluster Index"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Chi-two Cluster Index": [["is the output of", "GetChi2n"]], "GetChi2v": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the Chi^2v (Chi-two-v) valence molecular graph index for a molecule, which is used to describe the topology of the molecule. It returns a float value. "], ["inputs", "SMILES"], ["outputs", "Chi-two-v valence molecular graph index "], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Chi-two-v valence molecular graph index ": [["is the output of", "GetChi2v"]], "GetChi3n": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the chi^3 (chi-three) cluster index, which represents a topological descriptor related to molecular branching. "], ["inputs", "SMILES"], ["outputs", "Chi-three Cluster Index"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Chi-three Cluster Index": [["is the output of", "GetChi3n"]], "GetChi3v": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the Chi^3v (Chi-three-v) valence molecular graph index for a molecule, which is used to describe the topology of the molecule. It returns a float value. "], ["inputs", "SMILES"], ["outputs", "Chi-three-v Cluster Index"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Chi-three-v Cluster Index": [["is the output of", "GetChi3v"]], "GetChi4n": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the chi^4 (chi-four) cluster index, which represents a topological descriptor related to molecular branching. "], ["inputs", "SMILES"], ["outputs", "Chi-four Cluster Index"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Chi-four Cluster Index": [["is the output of", "GetChi4n"]], "GetChi4v": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the Chi^4v (Chi-four-v) valence molecular graph index for a molecule "], ["inputs", "SMILES"], ["outputs", "Chi-four-v Cluster Index"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Chi-four-v Cluster Index": [["is the output of", "GetChi4v"]], "GetCoulombMat": [["is a", "Chemical Tool"], ["has the functionality that", "Calculates the Coulomb matrix for a molecule, which represents the electrostatic interactions between atoms in the molecule."], ["inputs", "SMILES"], ["outputs", "Coulomb matrix"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Coulomb matrix": [["is the output of", "GetCoulombMat"]], "GetCrippenDescriptors": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the Wildman-Crippen logP and MR (molecular refractivity) values for a given molecule "], ["inputs", "SMILES"], ["outputs", "Wildman-Crippen logp value and mr value"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Wildman-Crippen logp value and mr value": [["is the output of", "GetCrippenDescriptors"]], "GetEEMCharges": [["is a", "Chemical Tool"], ["has the functionality that", "Compute the EEM (Electronegativity Equalization Method) atomic partial charges for a given molecule using its atomic properties."], ["inputs", "SMILES"], ["outputs", "EEM Charges"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "EEM Charges": [["is the output of", "GetEEMCharges"]], "GetEccentricity": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the eccentricity of a molecule, which is a measure of its shape. "], ["inputs", "SMILES"], ["outputs", "eccentricity value"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "eccentricity value": [["is the output of", "GetEccentricity"]], "GetFractionCSP3": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the fraction of sp3-hybridized carbon atoms in a molecule,"], ["inputs", "SMILES"], ["outputs", "Fraction of sp3-hybridized Carbon Atoms"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Fraction of sp3-hybridized Carbon Atoms": [["is the output of", "GetFractionCSP3"]], "GetGETAWAY": [["is a", "Chemical Tool"], ["has the functionality that", "Ccalculates the GETAWAY descriptors for a molecule, which capture the shape and size of the molecule"], ["inputs", "SMILES"], ["outputs", "GETAWAY Descriptors"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "GETAWAY Descriptors": [["is the output of", "GetGETAWAY"]], "GetHallKierAlpha": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the Hall-Kier alpha index for a molecule, which is a measure of its shape."], ["inputs", "SMILES"], ["outputs", "Hall-Kier alpha index"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Hall-Kier alpha index": [["is the output of", "GetHallKierAlpha"]], "GetInertialShapeFactor": [["is a", "Chemical Tool"], ["has the functionality that", "Calculates the Inertial Shape Factor of a molecule, which is a measure of its shape"], ["inputs", "SMILES"], ["outputs", "Inertial Shape Factor"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Inertial Shape Factor": [["is the output of", "GetInertialShapeFactor"]], "GetKappa1": [["is a", "Chemical Tool"], ["has the functionality that", "Compute the Kappa1 (\u03ba1) value of a molecule, which is a topological descriptor representing its shape complexity or branching degree"], ["inputs", "SMILES"], ["outputs", "Kappa1"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Kappa1": [["is the output of", "GetKappa1"]], "GetKappa2": [["is a", "Chemical Tool"], ["has the functionality that", "Compute the Kappa2 (\u03ba2) value of a molecule, which is a topological descriptor representing its shape complexity or branching degree"], ["inputs", "SMILES"], ["outputs", "Kappa2"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Kappa2": [["is the output of", "GetKappa2"]], "GetKappa3": [["is a", "Chemical Tool"], ["has the functionality that", "Compute the Kappa3 (\u03ba3) value of a molecule, which is a topological descriptor representing its shape complexity or branching degree"], ["inputs", "SMILES"], ["outputs", "Kappa3"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Kappa3": [["is the output of", "GetKappa3"]], "GetLabuteASA": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the Labute accessible surface area (ASA) value for a molecule"], ["inputs", "SMILES"], ["outputs", "Labute ASA"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Labute ASA": [["is the output of", "GetLabuteASA"]], "GetMolFormula": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the molecular formula of a molecule, which is a string representing the number and type of atoms in the molecule"], ["inputs", "SMILES"], ["outputs", "Molecule Formula"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "GetMORSE": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the Molecule Representation of Structures based on Electron diffraction (MORSE) descriptors for a given molecule "], ["inputs", "SMILES"], ["outputs", "MORSE Descriptor list"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "MORSE Descriptor list": [["is the output of", "GetMORSE"]], "GetNPR1": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the NPR1 (Normalized Principal Moments Ratio) descriptor for a molecule "], ["inputs", "SMILES"], ["outputs", "NPR1 value"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "NPR1 value": [["is the output of", "GetNPR1"]], "GetNPR2": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the NPR2 (Normalized Principal Moments Ratio) descriptor for a molecule"], ["inputs", "SMILES"], ["outputs", "NPR2 value"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "NPR2 value": [["is the output of", "GetNPR2"]], "GetAliphaticCarbocyclesNum": [["is a", "Chemical Tool"], ["has the functionality that", "Ccalculate the number of aliphatic carbocycles in a molecule "], ["inputs", "SMILES"], ["outputs", "Number of aliphatic carbocycles"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of aliphatic carbocycles": [["is the output of", "GetAliphaticCarbocyclesNum"]], "GetAliphaticHeterocyclesNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of aliphatic heterocycles in a molecule"], ["inputs", "SMILES"], ["outputs", "Number of aliphatic heterocycles"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of aliphatic heterocycles": [["is the output of", "GetAliphaticHeterocyclesNum"]], "GetAliphaticRingsNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of aliphatic rings in a molecule"], ["inputs", "SMILES"], ["outputs", "Number of aliphatic rings"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of aliphatic rings": [["is the output of", "GetAliphaticRingsNum"]], "GetAmideBondsNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of amide bonds in a molecule"], ["inputs", "SMILES"], ["outputs", "Number of amide bonds"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of amide bonds": [["is the output of", "GetAmideBondsNum"]], "GetAromaticCarbocyclesNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of aromatic carbocycles in a molecule "], ["inputs", "SMILES"], ["outputs", "Number of aromatic carbocycles"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of aromatic carbocycles": [["is the output of", "GetAromaticCarbocyclesNum"]], "GetAromaticHeterocyclesNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of aromatic heterocycles in a molecule"], ["inputs", "SMILES"], ["outputs", "Number of aromatic heterocycles"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of aromatic heterocycles": [["is the output of", "GetAromaticHeterocyclesNum"]], "GetAromaticRingsNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of aromatic rings in a molecule "], ["inputs", "SMILES"], ["outputs", "Number of aromatic rings"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of aromatic rings": [["is the output of", "GetAromaticRingsNum"]], "GetAtomStereoCentersNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of atom stereo centers in a molecule"], ["inputs", "SMILES"], ["outputs", "Number of atom stereo centers"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of atom stereo centers": [["is the output of", "GetAtomStereoCentersNum"]], "GetAtomsNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of atoms in a molecule"], ["inputs", "SMILES"], ["outputs", "Number of atoms"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "GetBridgeheadAtomsNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of bridgehead atoms in a molecule "], ["inputs", "SMILES"], ["outputs", "Number of bridgehead atoms"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of bridgehead atoms": [["is the output of", "GetBridgeheadAtomsNum"]], "GetHBANum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of hydrogen bond acceptors (HBA) in a molecule "], ["inputs", "SMILES"], ["outputs", "Number of hydrogen bond acceptors"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of hydrogen bond acceptors": [["is the output of", "GetHBANum"]], "GetHBDNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculates the number of hydrogen bond donors (HBD) in a molecule"], ["inputs", "SMILES"], ["outputs", "Number of hydrogen bond donors"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of hydrogen bond donors": [["is the output of", "GetHBDNum"]], "GetHeavyAtomsNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of heavy atoms in a molecule"], ["inputs", "SMILES"], ["outputs", "Number of heavy atoms"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of heavy atoms": [["is the output of", "GetHeavyAtomsNum"]], "GetHeteroatomsNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of heteroatoms in a molecule"], ["inputs", "SMILES"], ["outputs", "Number of heteroatoms"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of heteroatoms": [["is the output of", "GetHeteroatomsNum"]], "GetHeterocyclesNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of heterocycles in a molecule"], ["inputs", "SMILES"], ["outputs", "Number of heterocycles"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of heterocycles": [["is the output of", "GetHeterocyclesNum"]], "GetLipinskiHBANum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculates the number of Lipinski hydrogen bond acceptors (HBA) in a molecule "], ["inputs", "SMILES"], ["outputs", "Number of Lipinski H-bond acceptors(HBA)"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of Lipinski H-bond acceptors(HBA)": [["is the output of", "GetLipinskiHBANum"]], "GetLipinskiHBDNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of Lipinski hydrogen bond donors (HBD) in a molecule "], ["inputs", "SMILES"], ["outputs", "Number of Lipinski H-bond donors(HBD)"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of Lipinski H-bond donors(HBD)": [["is the output of", "GetLipinskiHBDNum"]], "GetRingsNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of rings in a molecule"], ["inputs", "SMILES"], ["outputs", "Number of rings"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of rings": [["is the output of", "GetRingsNum"]], "GetRotatableBondsNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of rotatable bonds in a molecule "], ["inputs", "SMILES"], ["outputs", "Number of rotatable bonds"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of rotatable bonds": [["is the output of", "GetRotatableBondsNum"]], "GetSaturatedCarbocyclesNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of saturated carbocycles in a molecule"], ["inputs", "SMILES"], ["outputs", "Number of saturated carbocycles"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of saturated carbocycles": [["is the output of", "GetSaturatedCarbocyclesNum"]], "GetSaturatedHeterocyclesNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of saturated heterocycles in a molecule"], ["inputs", "SMILES"], ["outputs", "Number of saturated heterocycles"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of saturated heterocycles": [["is the output of", "GetSaturatedHeterocyclesNum"]], "GetSaturatedRingsNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of saturated rings in a molecule"], ["inputs", "SMILES"], ["outputs", "Number of saturated rings"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of saturated rings": [["is the output of", "GetSaturatedRingsNum"]], "GetSpiroAtomsNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculate the number of spiro atoms in a molecule "], ["inputs", "SMILES"], ["outputs", "Number of spiro atoms"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of spiro atoms": [["is the output of", "GetSpiroAtomsNum"]], "GetUnspecifiedAtomStereoCentersNum": [["is a", "Chemical Tool"], ["has the functionality that", "Calculates the number of unspecified atomic stereocenters in a molecule"], ["inputs", "SMILES"], ["outputs", "Number of unspecified atom stereo centers"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Number of unspecified atom stereo centers": [["is the output of", "GetUnspecifiedAtomStereoCentersNum"]], "AssignOxidationNumbers": [["is a", "Chemical Tool"], ["has the functionality that", "Adds the oxidation number/state to the atoms of a molecule as property OxidationNumber on each atom."], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "CalculatePBF": [["is a", "Chemical Tool"], ["has the functionality that", "Calculates the PBF (plane of best fit) descriptor for a given SMILES"], ["inputs", "SMILES"], ["outputs", "PBF"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "PBF": [["is the output of", "CalculatePBF"]], "CalculatePMI1": [["is a", "Chemical Tool"], ["has the functionality that", "Calculates the first principal moment of inertia (PMI1) for a given SMILES"], ["inputs", "SMILES"], ["outputs", "PMI1"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "PMI1": [["is the output of", "CalculatePMI1"]], "CalculatePMI2": [["is a", "Chemical Tool"], ["has the functionality that", "Compute the PMI2 (Partial Molecular Information 2) value of a SMILES"], ["inputs", "SMILES"], ["outputs", "PMI2"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "PMI2": [["is the output of", "CalculatePMI2"]], "CalculatePMI3": [["is a", "Chemical Tool"], ["has the functionality that", "Compute the PMI3 (Partial Molecular Information 3) value of a SMILES"], ["inputs", "SMILES"], ["outputs", "PMI3"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "PMI3": [["is the output of", "CalculatePMI3"]], "CalculatePhi": [["is a", "Chemical Tool"], ["has the functionality that", "Ccalculates the Phi (\u03c6) angle of a molecule, which is a torsional angle describing the rotation about a single bond."], ["inputs", "SMILES"], ["outputs", "Phi angle"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Phi angle": [["is the output of", "CalculatePhi"]], "CalculateRDF": [["is a", "Chemical Tool"], ["has the functionality that", "Calculates the RDF (Radial Distribution Function) descriptor for a given SMILES"], ["inputs", "SMILES"], ["outputs", "RDF descriptor"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "RDF descriptor": [["is the output of", "CalculateRDF"]], "CalculateRadiusOfGyration": [["is a", "Chemical Tool"], ["has the functionality that", "Compute the radius of gyration for a given SMILES"], ["inputs", "SMILES"], ["outputs", "radius of gyration"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "radius of gyration": [["is the output of", "CalculateRadiusOfGyration"]], "CalculateSpherocityIndex": [["is a", "Chemical Tool"], ["has the functionality that", "Ccalculates the sphericity index for a given SMILES"], ["inputs", "SMILES"], ["outputs", "sphericity index"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "sphericity index": [["is the output of", "CalculateSpherocityIndex"]], "CalculateTPSA": [["is a", "Chemical Tool"], ["has the functionality that", "Calculates the TPSA (Topological Polar Surface Area) descriptor for a given SMILES"], ["inputs", "SMILES"], ["outputs", "TPSA (Topological Polar Surface Area) descriptor"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "TPSA (Topological Polar Surface Area) descriptor": [["is the output of", "CalculateTPSA"]], "CalculateWHIM": [["is a", "Chemical Tool"], ["has the functionality that", "Calculates the WHIM (Weighted Holistic Invariant Molecular) descriptor for a given SMILES"], ["inputs", "SMILES"], ["outputs", "WHIM (Weighted Holistic Invariant Molecular) descriptor"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "WHIM (Weighted Holistic Invariant Molecular) descriptor": [["is the output of", "CalculateWHIM"]], "CustomPropertyVSA": [["is a", "Chemical Tool"], ["has the functionality that", "Computes a custom property for a given SMILES using the Van der Waals Surface Area (VSA) method"], ["inputs", "SMILES"], ["outputs", "custom property"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "custom property": [["is the output of", "CustomPropertyVSA"]], "GetAtomFeature": [["is a", "Chemical Tool"], ["has the functionality that", "Computes a set of atom features for a given molecule, including atomic number, valence, and hybridization"], ["inputs", "SMILES"], ["outputs", "atom features"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "atom features": [["is the output of", "GetAtomFeature"]], "GetAtomPairFingerprint": [["is a", "Chemical Tool"], ["has the functionality that", "Computes the atom pair fingerprint for a given molecule"], ["inputs", "SMILES"], ["outputs", "atom pair fingerprint"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "atom pair fingerprint": [["is the output of", "GetAtomPairFingerprint"]], "GetConnectivityInvariants": [["is a", "Chemical Tool"], ["has the functionality that", "Computes connectivity invariants, similar to ECFP (Extended Connectivity Fingerprints)"], ["inputs", "SMILES"], ["outputs", "connectivity invariants"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "connectivity invariants": [["is the output of", "GetConnectivityInvariants"]], "GetFeatureInvariants": [["is a", "Chemical Tool"], ["has the functionality that", "Computes feature invariants, similar to FCFP (Feature Centroid Fingerprints) for a given molecule"], ["inputs", "SMILES"], ["outputs", "feature invariants"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "feature invariants": [["is the output of", "GetFeatureInvariants"]], "GetAtomPairCode": [["is a", "Chemical Tool"], ["has the functionality that", "Computes atom code (hash) for each atom in a molecular"], ["inputs", "SMILES"], ["outputs", "atom code (hash) for each atom"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "atom code (hash) for each atom": [["is the output of", "GetAtomPairCode"]], "GetHybridization": [["is a", "Chemical Tool"], ["has the functionality that", "Computes the hybridization of each atom in a molecule"], ["inputs", "SMILES"], ["outputs", "hybridization of each atom"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "hybridization of each atom": [["is the output of", "GetHybridization"]], "GetRingSystems": [["is a", "Chemical Tool"], ["has the functionality that", "Computes the ring systems of a molecule"], ["inputs", "SMILES"], ["outputs", "ring systems"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "ring systems": [["is the output of", "GetRingSystems"]], "GetMACCSKeysFingerprint": [["is a", "Chemical Tool"], ["has the functionality that", "Computes the Molecular ACCess System keys fingerprint for a given molecule"], ["inputs", "SMILES"], ["outputs", "Molecular ACCess System keys fingerprint"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Molecular ACCess System keys fingerprint": [["is the output of", "GetMACCSKeysFingerprint"]], "GetMorganFingerprint": [["is a", "Chemical Tool"], ["has the functionality that", "Computes the Morgan fingerprint for a given molecule"], ["inputs", "SMILES"], ["outputs", "Morgan fingerprint"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "GetTopologicalTorsionFingerprint": [["is a", "Chemical Tool"], ["has the functionality that", "Computes the topological torsion fingerprint for a given molecule"], ["inputs", "SMILES"], ["outputs", "topological torsion fingerprint"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "topological torsion fingerprint": [["is the output of", "GetTopologicalTorsionFingerprint"]], "GetUSR": [["is a", "Chemical Tool"], ["has the functionality that", "Computes the USR (Ultrafast Shape Recognition) descriptor for a given conformer of a moleculently"], ["inputs", "SMILES"], ["outputs", "USR (Ultrafast Shape Recognition)"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "USR (Ultrafast Shape Recognition)": [["is the output of", "GetUSR"]], "GetUSRCAT": [["is a", "Chemical Tool"], ["has the functionality that", "Compute the USRCAT (Ultrafast Shape Recognition with Coordinate Asymmetric Torsions) descriptor for a specified conformer of a molecule."], ["inputs", "SMILES"], ["outputs", "USRCAT (Ultrafast Shape Recognition with Coordinate Asymmetric Torsions)"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "USRCAT (Ultrafast Shape Recognition with Coordinate Asymmetric Torsions)": [["is the output of", "GetUSRCAT"]], "AddHydrogens": [["is a", "Chemical Tool"], ["has the functionality that", "Add hydrogen atoms to the molecular graph of a molecule"], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "AddWavyBondsForStereoAny": [["is a", "Chemical Tool"], ["has the functionality that", "Adds wavy bonds around double bonds with STEREOANY stereochemistry"], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "AssignAtomChiralTagsFromStructure": [["is a", "Chemical Tool"], ["has the functionality that", "Sets chiral tags for atoms of the molecular based on the molParity property"], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "AssignRadicals": [["is a", "Chemical Tool"], ["has the functionality that", "Assign radical counts to atoms within a molecule"], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "AssignStereoChemistry": [["is a", "Chemical Tool"], ["has the functionality that", "Assign Cahn\u2013Ingold\u2013Prelog (CIP) stereochemistry to atoms (R/S) and double bonds (Z/E) within a molecule"], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "GetAdjacencyMatrix": [["is a", "Chemical Tool"], ["has the functionality that", "Obtain the adjacency matrix of a molecule"], ["inputs", "SMILES"], ["outputs", "adjacency matrix"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "adjacency matrix": [["is the output of", "GetAdjacencyMatrix"]], "GetAllowNontetrahedralChirality": [["is a", "Chemical Tool"], ["has the functionality that", "Determine whether recognition of non-tetrahedral chirality from 3D structures is enabled or not"], ["inputs", "SMILES"], ["outputs", "True or False"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "GetDistanceMatrix": [["is a", "Chemical Tool"], ["has the functionality that", "Computes the topological distance matrix for a given molecule"], ["inputs", "SMILES"], ["outputs", "distance matrix"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "distance matrix": [["is the output of", "GetDistanceMatrix"]], "GetFormalCharge": [["is a", "Chemical Tool"], ["has the functionality that", "Determine the total formal charge of a given molecule"], ["inputs", "SMILES"], ["outputs", "formal charge"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "formal charge": [["is the output of", "GetFormalCharge"], ["is the output of", "GetFormalChargeOfAtoms"]], "GetFormalChargeOfAtoms": [["is a", "Chemical Tool"], ["has the functionality that", "Determine the formal charge of each atom in a given molecule"], ["inputs", "SMILES"], ["outputs", "formal charge"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "GetMolFrags": [["is a", "Chemical Tool"], ["has the functionality that", "Identifies disconnected fragments within a molecule and returns them as atom identifiers or molecules. It allows for flexible representation and manipulation of the fragments in further analysis."], ["inputs", "SMILES"], ["outputs", "molecule fragments"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "molecule fragments": [["is the output of", "GetMolFrags"]], "GetUseLegacyStereoPerception": [["is a", "Chemical Tool"], ["has the functionality that", "Determine whether the legacy stereo perception code is being used"], ["inputs", "SMILES"], ["outputs", "True or False"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "HapticBondsToDative": [["is a", "Chemical Tool"], ["has the functionality that", "Convert a molecule that represents haptic bonds using a dummy atom with a dative bond to a metal atom into a molecule with explicit dative bonds from the atoms of the haptic group to the metal atom."], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "HasQueryHs": [["is a", "Chemical Tool"], ["has the functionality that", "Check if a molecule contains query H (hydrogen) atoms"], ["inputs", "SMILES"], ["outputs", "True or False"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "Kekulize": [["is a", "Chemical Tool"], ["has the functionality that", "Perform Kekulization on a molecule"], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "MergeQueryHs": [["is a", "Chemical Tool"], ["has the functionality that", "Merge hydrogen atoms into their neighboring atoms as query atoms"], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "MurckoDecompose": [["is a", "Chemical Tool"], ["has the functionality that", "This tool is used to perform a Murcko decomposition on a molecule and return the scaffold"], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "RemoveHydrogens": [["is a", "Chemical Tool"], ["has the functionality that", "Remove hydrogen atoms from a molecule's graph"], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "RemoveStereochemistry": [["is a", "Chemical Tool"], ["has the functionality that", "Remove all stereochemistry information from a molecule"], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "SetAromaticity": [["is a", "Chemical Tool"], ["has the functionality that", "Perform aromaticity perception on a molecule"], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "SetBondStereoFromDirections": [["is a", "Chemical Tool"], ["has the functionality that", "Set the cis/trans stereochemistry on double bonds"], ["inputs", "SMILES"], ["outputs", "SMILES"], ["is sourced from", "Python Package(rdkit)"], ["does not need", "Security Check"]], "SearchMaterialsContainingElements": [["is a", "Material Tool"], ["has the functionality that", "Search for materials containing at least the specified elements"], ["inputs", "elements"], ["outputs", "material_id"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "SearchMaterialsByChemsys": [["is a", "Material Tool"], ["has the functionality that", "Search for materials containing only specified chemsys(elements)"], ["inputs", "chemsys"], ["outputs", "material_id"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "chemsys": [["is the input of", "SearchMaterialsByChemsys"]], "GetDocByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "get the detailed information of a material by its material_id"], ["inputs", "material_id"], ["outputs", "band gap"], ["outputs", "volume"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "band gap": [["is the output of", "GetDocByMaterialId"], ["is the output of", "GetBandGapByMaterialId"], ["is the output of", "GetBandGapByFormula"]], "volume": [["is the output of", "GetDocByMaterialId"], ["is the output of", "GetVolumeByFormula"], ["is the output of", "GetVolumeByMaterialId"]], "GetFormulaByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the formula of a material by its material_id"], ["inputs", "material_id"], ["outputs", "Molecule Formula"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetMaterialIdByFormula": [["is a", "Material Tool"], ["has the functionality that", "Get the material_id of a material by its formula"], ["inputs", "Molecule Formula"], ["outputs", "material_id"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetBandGapByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the band gap of a material by its material_id"], ["inputs", "material_id"], ["outputs", "band gap"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetBandGapByFormula": [["is a", "Material Tool"], ["has the functionality that", "Get the band gap of a material by its formula"], ["inputs", "Molecule Formula"], ["outputs", "band gap"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetVolumeByFormula": [["is a", "Material Tool"], ["has the functionality that", "Get the volume of a material by its formula"], ["inputs", "Molecule Formula"], ["outputs", "volume"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetVolumeByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the volume of a material by its material_id"], ["inputs", "material_id"], ["outputs", "volume"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetDensityByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the density of a material by its material_id"], ["inputs", "material_id"], ["outputs", "density"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "density": [["is the output of", "GetDensityByMaterialId"], ["is the output of", "GetDensityByFormula"], ["is the output of", "CalculateDensity"]], "GetDensityByFormula": [["is a", "Material Tool"], ["has the functionality that", "get the density of a material by its formula"], ["inputs", "Molecule Formula"], ["outputs", "density"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetDensityAtomicByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the atomic density of a material by its material_id"], ["inputs", "material_id"], ["outputs", "atomic density"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "atomic density": [["is the output of", "GetDensityAtomicByMaterialId"], ["is the output of", "GetDensityAtomicByFormula"]], "GetDensityAtomicByFormula": [["is a", "Material Tool"], ["has the functionality that", "Get the atomic density of a material by its formula"], ["inputs", "Molecule Formula"], ["outputs", "atomic density"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetEnergyAboveHullByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the energy above hull of a material by its material_id"], ["inputs", "material_id"], ["outputs", "energy above hull"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "energy above hull": [["is the output of", "GetEnergyAboveHullByMaterialId"]], "GetInitialStructuresByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the initial structures of a material by its material_id"], ["inputs", "material_id"], ["outputs", "initial structure"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "initial structure": [["is the output of", "GetInitialStructuresByMaterialId"], ["is the output of", "GetInitialStructuresByFormula"]], "GetInitialStructuresByFormula": [["is a", "Material Tool"], ["has the functionality that", "Get the initial structures of a material by its formula"], ["inputs", "Molecule Formula"], ["outputs", "initial structure"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetStructureByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the structure of a material by its material_id"], ["inputs", "material_id"], ["outputs", "material structure"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"], ["is a", "Material Tool"], ["has the functionality that", "Get the structure of a material by its material_id"], ["inputs", "material_id"], ["outputs", "material structure"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "material structure": [["is the output of", "GetStructureByMaterialId"], ["is the output of", "GetStructureByMaterialId"]], "SearchByBandGap": [["is a", "Material Tool"], ["has the functionality that", "Search for materials with band gap equal to the specified value"], ["inputs", "band gap range"], ["outputs", "material_id"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "band gap range": [["is the input of", "SearchByBandGap"]], "SearchXasByFormula": [["is a", "Material Tool"], ["has the functionality that", "Search XAS data of a material by its formula"], ["inputs", "Molecule Formula"], ["outputs", "XAS data"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "XAS data": [["is the output of", "SearchXasByFormula"]], "GetCbmByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the Conduction Band Minimum of a material by its material_id"], ["inputs", "material_id"], ["outputs", "Conduction Band Minimum"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "Conduction Band Minimum": [["is the output of", "GetCbmByMaterialId"], ["is the output of", "GetCbmByFormula"]], "GetCbmByFormula": [["is a", "Material Tool"], ["has the functionality that", "Get the Conduction Band Minimum of a material by its formula"], ["inputs", "Molecule Formula"], ["outputs", "Conduction Band Minimum"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetEnergyPerAtomByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the energy per atom of a material by its material_id"], ["inputs", "material_id"], ["outputs", "energy per atom"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "energy per atom": [["is the output of", "GetEnergyPerAtomByMaterialId"], ["is the output of", "GetEnergyPerAtomByFormula"]], "GetEnergyPerAtomByFormula": [["is a", "Material Tool"], ["has the functionality that", "Get the energy per atom of a material by its formula"], ["inputs", "Molecule Formula"], ["outputs", "energy per atom"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetEfermiByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the Fermi energy of a material by its material_id"], ["inputs", "material_id"], ["outputs", "fermi energy"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "fermi energy": [["is the output of", "GetEfermiByMaterialId"], ["is the output of", "GetEfermiByFormula"]], "GetEfermiByFormula": [["is a", "Material Tool"], ["has the functionality that", "Get the Fermi energy of a material by its formula"], ["inputs", "Molecule Formula"], ["outputs", "fermi energy"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetVbmByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the Valence Band Maximum of a material by its material_id"], ["inputs", "material_id"], ["outputs", "Valence Band Maximum"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "Valence Band Maximum": [["is the output of", "GetVbmByMaterialId"], ["is the output of", "GetVbmByFormula"]], "GetVbmByFormula": [["is a", "Material Tool"], ["has the functionality that", "Get the Valence Band Maximum of a material by its formula"], ["inputs", "material_id"], ["outputs", "Valence Band Maximum"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetFormationEnergyPerAtomByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the formation energy per atom of a material by its material_id"], ["inputs", "material_id"], ["outputs", "formation energy per atom"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "formation energy per atom": [["is the output of", "GetFormationEnergyPerAtomByMaterialId"], ["is the output of", "GetFormationEnergyPerAtomByFormula"]], "GetFormationEnergyPerAtomByFormula": [["is a", "Material Tool"], ["has the functionality that", "Get the formation energy per atom of a material by its formula."], ["inputs", "Molecule Formula"], ["outputs", "formation energy per atom"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetETotalByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the total energy of a material by its material_id"], ["inputs", "material_id"], ["outputs", "total energy"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "total energy": [["is the output of", "GetETotalByMaterialId"], ["is the output of", "GetETotalByFormula"]], "GetETotalByFormula": [["is a", "Material Tool"], ["has the functionality that", "Get the total energy of a material by its formula"], ["inputs", "Molecule Formula"], ["outputs", "total energy"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetEIonicByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the ionic energy of a material by its material_id"], ["inputs", "material_id"], ["outputs", "ionic energy"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "ionic energy": [["is the output of", "GetEIonicByMaterialId"], ["is the output of", "GetEIonicByFormula"]], "GetEIonicByFormula": [["is a", "Material Tool"], ["has the functionality that", "Get the ionic energy of a material by its formula"], ["inputs", "Molecule Formula"], ["outputs", "ionic energy"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetEElectronicByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the electronic energy of a material by its material_id"], ["inputs", "material_id"], ["outputs", "electronnic energy"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetEElectronicByFormula": [["is a", "Material Tool"], ["has the functionality that", "Get the electronic energy of a material by its formula"], ["inputs", "Molecule Formula"], ["outputs", "electronnic energy"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetEquilibriumReactionEnergyPerAtom": [["is a", "Material Tool"], ["has the functionality that", "Get the equilibrium reaction energy per atom of a material by its material_id"], ["inputs", "material_id"], ["outputs", "equilibrium reaction energy per atom"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "equilibrium reaction energy per atom": [["is the output of", "GetEquilibriumReactionEnergyPerAtom"]], "GetFormulaAnonymousByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the anonymous formula of a material by its material_id"], ["inputs", "material_id"], ["outputs", "anonymous formula"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "GetFormulaAnonymousByFormula": [["is a", "Material Tool"], ["has the functionality that", "Get the anonymous formula of a material by its formula"], ["inputs", "Molecule Formula"], ["outputs", "anonymous formula"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "IsMagneticByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Check if a material is magnetic by its material_id"], ["inputs", "material_id"], ["outputs", "True or False"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "IsMagneticByFormula": [["is a", "Material Tool"], ["has the functionality that", "Check if a material is a metal by its formula"], ["inputs", "Molecule Formula"], ["outputs", "True or False"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "IsMetalByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Check if a material is a metal by its material_id"], ["inputs", "material_id"], ["outputs", "True or False"], ["is sourced from", "Python Package(mp-api)"], ["does not need", "Security Check"]], "IsMetalByFormula": [["is a", "Material Tool"], ["has the functionality that", "Check if a material is metal by its formula"], ["inputs", "Molecule Formula"], ["outputs", "True or False"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "IsStableByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Check if a material is stable by its material_id"], ["inputs", "material_id"], ["outputs", "True or False"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "IsStableByFormula": [["is a", "Material Tool"], ["has the functionality that", "Check if a material is stable by its material_id"], ["inputs", "Molecule Formula"], ["outputs", "True or False"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetNumMagneticSitesByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the number of magnetic sites of a material by its material_id"], ["inputs", "material_id"], ["outputs", "number of magnetic sites"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "number of magnetic sites": [["is the output of", "GetNumMagneticSitesByMaterialId"]], "GetTotalMagnetizationByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the total magnetization of a material by its material_id"], ["inputs", "material_id"], ["outputs", "total magnetization"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "total magnetization": [["is the output of", "GetTotalMagnetizationByMaterialId"]], "GetTotalMagnetizationNormalizedFormulaUnitsByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the total magnetization normalized to formula units of a material by its material_id"], ["inputs", "material_id"], ["outputs", "total magnetization normalized to formula units"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "total magnetization normalized to formula units": [["is the output of", "GetTotalMagnetizationNormalizedFormulaUnitsByMaterialId"]], "GetTotalMagnetizationNormalizedVolByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the total magnetization normalized to volume of a material by its material_id"], ["inputs", "material_id"], ["outputs", "total magnetization normalized to volume"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "total magnetization normalized to volume": [["is the output of", "GetTotalMagnetizationNormalizedVolByMaterialId"]], "GetUncorrectedEnergyPerAtomByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the energy per atom of a material calculated using Density Functional Theory (DFT) before corrections by its material_id"], ["inputs", "material_id"], ["outputs", "uncorrected energy per atom of a material"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "uncorrected energy per atom of a material": [["is the output of", "GetUncorrectedEnergyPerAtomByMaterialId"]], "GetEosInfoByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the equation of state(EOS) information of a material by its material_id"], ["inputs", "material_id"], ["outputs", "equation of state(EOS) information"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "equation of state(EOS) information": [["is the output of", "GetEosInfoByMaterialId"]], "GetPhononInfoByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the phonon band structure of a material by its material_id"], ["inputs", "material_id"], ["outputs", "phonon band structure"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "phonon band structure": [["is the output of", "GetPhononInfoByMaterialId"]], "GetCrystalStructureByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the crystal structure of a material by its material_id"], ["inputs", "material_id"], ["outputs", "crystal structure"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "crystal structure": [["is the output of", "GetCrystalStructureByMaterialId"]], "GetAtomicPositionsMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the atomic positions of a material by its material_id"], ["inputs", "material_id"], ["outputs", "atomic positions"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "atomic positions": [["is the output of", "GetAtomicPositionsMaterialId"]], "GetMagnetismInfoByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the magnetism information of a material by its material_id"], ["inputs", "material_id"], ["outputs", "magnetism information"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "magnetism information": [["is the output of", "GetMagnetismInfoByMaterialId"]], "GetCompositionByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the composition of a material by its material_id"], ["inputs", "material_id"], ["outputs", "material composition summary"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "material composition summary": [["is the output of", "GetCompositionByMaterialId"], ["is the output of", "GetEntriesCompositionSummaryByBatteryId"]], "GetPhysicalPropertiesByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the physical properties of a material by its material_id"], ["inputs", "material_id"], ["outputs", "physical properties"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "physical properties": [["is the output of", "GetPhysicalPropertiesByMaterialId"]], "GetNsitesByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the number of sites of a material by its material_id"], ["inputs", "material_id"], ["outputs", "number of sites"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "number of sites": [["is the output of", "GetNsitesByMaterialId"]], "GetElementsByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the elements of a material by its material_id"], ["inputs", "material_id"], ["outputs", "elements"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetNumberOfElementsByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the number of elements of a material by its material_id"], ["inputs", "material_id"], ["outputs", "number of elements"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetDielectricByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the dielectric information of a material by its material_id"], ["inputs", "material_id"], ["outputs", "dielectric informatiom"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "dielectric informatiom": [["is the output of", "GetDielectricByMaterialId"]], "GetCrystalSystemByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the crystal system of a material by its material_id"], ["inputs", "material_id"], ["outputs", "crystal system"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "crystal system": [["is the output of", "GetCrystalSystemByMaterialId"]], "GetChemicalSystemByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the chemical system of a material by its material_id"], ["inputs", "material_id"], ["outputs", "chemical system"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetSpaceGroupSymbolByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the space group symbol of a material by its material_id"], ["inputs", "material_id"], ["outputs", "space group symbol"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "space group symbol": [["is the output of", "GetSpaceGroupSymbolByMaterialId"]], "GetFormulaPrettyByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the pretty formula of a material by its material_id"], ["inputs", "material_id"], ["outputs", "pretty formula"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetSurfaceAnisotropyByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the surface anisotropy of a material by its material_id"], ["inputs", "material_id"], ["outputs", "surface anisotropy"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "surface anisotropy": [["is the output of", "GetSurfaceAnisotropyByMaterialId"]], "GetWeightedSurfaceEnergyByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the weighted surface energy of a material by its material_id"], ["inputs", "material_id"], ["outputs", "weighted surface energy"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "weighted surface energy": [["is the output of", "GetWeightedSurfaceEnergyByMaterialId"]], "GetRobocrystallographerData": [["is a", "Material Tool"], ["has the functionality that", "Get material structure descriptions from the Materials Project Robocrystallographer API based on given keywords."], ["inputs", "keywords"], ["outputs", "material_id"], ["outputs", "formula"], ["outputs", "structure"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "keywords": [["is the input of", "GetRobocrystallographerData"], ["is the input of", "GetSynthesisDocByKeywords"]], "formula": [["is the output of", "GetRobocrystallographerData"]], "structure": [["is the output of", "GetRobocrystallographerData"]], "GetDescriptionByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the description of a material by its material_id"], ["inputs", "material_id"], ["outputs", "material description"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "material description": [["is the output of", "GetDescriptionByMaterialId"]], "GetSynthesisDocByKeywords": [["is a", "Material Tool"], ["has the functionality that", "Fetches synthesis documents from the Materials Project Synthesis API based on given keywords."], ["inputs", "keywords"], ["outputs", "synthwsis documents"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "synthwsis documents": [["is the output of", "GetSynthesisDocByKeywords"]], "GetBatteryFormulaByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the battery formula of a material by its battery_id"], ["inputs", "battery_id"], ["outputs", "battery formula"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "battery_id": [["is the input of", "GetBatteryFormulaByBatteryId"], ["is the input of", "GetWorkingIonByBatteryId"], ["is the input of", "GetMaxVoltageStepByBatteryId"], ["is the input of", "GetFrameworkByBatteryId"], ["is the input of", "GetFrameworkFormulaByBatteryId"], ["is the input of", "GetElementsByBatteryId"], ["is the input of", "GetNelementsByBatteryId"], ["is the input of", "GetChemsysByBatteryId"], ["is the input of", "GetFormulaAnonymousByBatteryId"], ["is the input of", "GetWarningsByBatteryId"], ["is the input of", "GetFormulaChargeByBatteryId"], ["is the input of", "GetFormulaDischargeByBatteryId"], ["is the input of", "GetEnergyVolumeByBatteryId"], ["is the input of", "GetMaxDeltaVolumeBatteryId"], ["is the input of", "GetAverageVoltageByBatteryId"], ["is the input of", "GetCapacityGravByBatteryId"], ["is the input of", "GetCapacityVolByBatteryId"], ["is the input of", "GetEnergyGravByBatteryId"], ["is the input of", "GetFracAChargeByBatteryId"], ["is the input of", "GetStabilityChargeByBatteryId"], ["is the input of", "GetStabilityDischargeByBatteryId"], ["is the input of", "GetIdChargeByBatteryId"], ["is the input of", "GetIdDischargeByBatteryId"], ["is the input of", "GetHostStructureByBatteryId"], ["is the input of", "GetAdjPairsByBatteryId"], ["is the input of", "GetMaterialIdByBatteryId"], ["is the input of", "GetEntriesCompositionSummaryByBatteryId"], ["is the input of", "GetElectrodeObjectByBatteryId"]], "battery formula": [["is the output of", "GetBatteryFormulaByBatteryId"]], "GetWorkingIonByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the working ion of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "working ion"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "working ion": [["is the output of", "GetWorkingIonByBatteryId"]], "GetMaxVoltageStepByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the maximum voltage step of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "maximum voltage step"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "maximum voltage step": [["is the output of", "GetMaxVoltageStepByBatteryId"]], "GetFrameworkByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the framework of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "framework of battery material"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "framework of battery material": [["is the output of", "GetFrameworkByBatteryId"]], "GetFrameworkFormulaByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the framework formula of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "framework formula"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "framework formula": [["is the output of", "GetFrameworkFormulaByBatteryId"]], "GetElementsByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the elements of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "elements"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetNelementsByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the number of elements of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "number of elements"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetChemsysByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the chemical system of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "chemical system"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetFormulaAnonymousByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the anonymous formula of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "anonymous formula"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetWarningsByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the warnings of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "warnings"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetFormulaChargeByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the charge formula of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "charge formula"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "charge formula": [["is the output of", "GetFormulaChargeByBatteryId"]], "GetFormulaDischargeByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the discharge formula of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "discharge formula"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "discharge formula": [["is the output of", "GetFormulaDischargeByBatteryId"]], "GetEnergyVolumeByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the energy volume of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "energy volume"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "energy volume": [["is the output of", "GetEnergyVolumeByBatteryId"]], "GetMaxDeltaVolumeBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the maximum delta volume of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "maximum delta volume"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "maximum delta volume": [["is the output of", "GetMaxDeltaVolumeBatteryId"]], "GetAverageVoltageByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the average voltage of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "average voltage"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "average voltage": [["is the output of", "GetAverageVoltageByBatteryId"]], "GetCapacityGravByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the gravimetric capacity of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "gravimetric capacity"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "gravimetric capacity": [["is the output of", "GetCapacityGravByBatteryId"]], "GetCapacityVolByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the volumetric capacity of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "volumetric capacity"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "volumetric capacity": [["is the output of", "GetCapacityVolByBatteryId"]], "GetEnergyGravByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the gravimetric energy of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "gravimetric energy"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "gravimetric energy": [["is the output of", "GetEnergyGravByBatteryId"]], "GetFracAChargeByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the charge fraction of A of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "charge fraction of A"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "charge fraction of A": [["is the output of", "GetFracAChargeByBatteryId"]], "GetStabilityChargeByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the charge stability of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "charge stability"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "charge stability": [["is the output of", "GetStabilityChargeByBatteryId"]], "GetStabilityDischargeByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the discharge stability of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "discharge stability"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "discharge stability": [["is the output of", "GetStabilityDischargeByBatteryId"]], "GetIdChargeByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the charge id of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "charge id"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "charge id": [["is the output of", "GetIdChargeByBatteryId"]], "GetIdDischargeByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the discharge id of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "discharge id"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "discharge id": [["is the output of", "GetIdDischargeByBatteryId"]], "GetHostStructureByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the host structure of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "host structure"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "host structure": [["is the output of", "GetHostStructureByBatteryId"]], "GetAdjPairsByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the adj pairs of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "adj pairs"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "adj pairs": [["is the output of", "GetAdjPairsByBatteryId"]], "GetMaterialIdByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the material id of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "material_id"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetEntriesCompositionSummaryByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the composition summary of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "material composition summary"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetElectrodeObjectByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the electrode object of a battery material by its battery_id"], ["inputs", "battery_id"], ["outputs", "electrode object"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "electrode object": [["is the output of", "GetElectrodeObjectByBatteryId"]], "IsDeprecated": [["is a", "Material Tool"], ["has the functionality that", "Check if a material is deprecated or not"], ["inputs", "material_id"], ["outputs", "True or False"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetDeprecatedReasonsByBatteryId": [["is a", "Material Tool"], ["has the functionality that", "Get the deprecation reasons of a battery material by its material_id"], ["inputs", "material_id"], ["outputs", "deprecation reasons"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetPossibleSpeciesByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the possible species of a material by its material_id"], ["inputs", "material_id"], ["outputs", "possible species"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "possible species": [["is the output of", "GetPossibleSpeciesByMaterialId"]], "GetPossibleValencesByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the possible valences of a material by its material_id"], ["inputs", "material_id"], ["outputs", "possible valences"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "possible valences": [["is the output of", "GetPossibleValencesByMaterialId"]], "GetAverageOxidationStatesByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the average oxidation states of a material by its material_id"], ["inputs", "material_id"], ["outputs", "average oxidation states"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "average oxidation states": [["is the output of", "GetAverageOxidationStatesByMaterialId"]], "GetPropertyNameByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the property name of a material by its material_id"], ["inputs", "material_id"], ["outputs", "property name"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetOxidationStateMethodByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the oxidation state method of a material by its material_id"], ["inputs", "material_id"], ["outputs", "oxidation state method"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "oxidation state method": [["is the output of", "GetOxidationStateMethodByMaterialId"]], "GetSymmetryByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the symmetry of a material by its material_id"], ["inputs", "material_id"], ["outputs", "symmetry"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetCreatedTimeByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the created time of a material by its material_id"], ["inputs", "material_id"], ["outputs", "created time"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "created time": [["is the output of", "GetCreatedTimeByMaterialId"]], "GetReferencesByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the references of a material by its material_id"], ["inputs", "material_id"], ["outputs", "references"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "references": [["is the output of", "GetReferencesByMaterialId"]], "GetAuthorsByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the authors of a material by its material_id"], ["inputs", "material_id"], ["outputs", "authors"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "authors": [["is the output of", "GetAuthorsByMaterialId"]], "GetRemarksByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the remarks of a material by its material_id"], ["inputs", "material_id"], ["outputs", "remarks"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "remarks": [["is the output of", "GetRemarksByMaterialId"]], "GetLastUpdatedTimeByTaskId": [["is a", "Material Tool"], ["has the functionality that", "Get the last updated time of a task by its task_id"], ["inputs", "task_id"], ["outputs", "last updated time"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "task_id": [["is the input of", "GetLastUpdatedTimeByTaskId"], ["is the input of", "GetFsIdByTaskId"], ["is the output of", "GetTaskIdByFsId"]], "GetFsIdByTaskId": [["is a", "Material Tool"], ["has the functionality that", "Get the fs_id of a task by its task_id"], ["inputs", "task_id"], ["outputs", "fs_id"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "fs_id": [["is the output of", "GetFsIdByTaskId"], ["is the input of", "GetTaskIdByFsId"], ["is the input of", "GetUrlByFsId"]], "GetTaskIdByFsId": [["is a", "Material Tool"], ["has the functionality that", "Get the task_id of a task by its fs_id"], ["inputs", "fs_id"], ["outputs", "task_id"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetUrlByFsId": [["is a", "Material Tool"], ["has the functionality that", "Get the URL of a task by its fs_id"], ["inputs", "fs_id"], ["outputs", "URL"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "URL": [["is the output of", "GetUrlByFsId"]], "GetAlloyPairsByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get comprehensive information about specific alloy pairs by material id. Return up to 5 results."], ["inputs", "material_id"], ["outputs", "alloy pairs"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "alloy pairs": [["is the output of", "GetAlloyPairsByMaterialId"]], "GetPairIdByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the pair_id of a pair by its material_id"], ["inputs", "material_id"], ["outputs", "pair id"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "pair id": [["is the output of", "GetPairIdByMaterialId"]], "GetBondInfoByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the chemical bonding information for a specified material by material id."], ["inputs", "material_id"], ["outputs", "Bond info"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Bond info": [["is the output of", "GetBondInfoByMaterialId"]], "GetBondTypesByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the bond types for a given material ID."], ["inputs", "material_id"], ["outputs", "Bond types"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Bond types": [["is the output of", "GetBondTypesByMaterialId"]], "GetBondLengthStatsByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the bond length statistics for a given material ID."], ["inputs", "material_id"], ["outputs", "Bond length"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "Bond length": [["is the output of", "GetBondLengthStatsByMaterialId"]], "GetCoordinationEnvsByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the coordination environments for a given material ID."], ["inputs", "material_id"], ["outputs", "coordination environments"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "coordination environments": [["is the output of", "GetCoordinationEnvsByMaterialId"]], "GetOriginsByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the coordination environments for a given material ID."], ["inputs", "material_id"], ["outputs", "origins"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "GetCoordinationEnvsAnonymousByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the coordination environments for a given material ID."], ["inputs", "material_id"], ["outputs", "anonymous coordination environments"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "anonymous coordination environments": [["is the output of", "GetCoordinationEnvsAnonymousByMaterialId"]], "GetStructureGraphByMaterialId": [["is a", "Material Tool"], ["has the functionality that", "Get the structure graph for a given material ID."], ["inputs", "material_id"], ["outputs", "structure graph"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "structure graph": [["is the output of", "GetStructureGraphByMaterialId"]], "MOFToSMILES": [["is a", "Material Tool"], ["has the functionality that", "Convert MOF material in CIF format into SMILES format"], ["inputs", "CIF"], ["outputs", "SMILES"], ["is sourced from", "Python Package(moffragmentor)"], ["does not need", "Security Check"]], "CIF": [["is the input of", "MOFToSMILES"], ["is the input of", "PredictStability"], ["is the input of", "PredictAdsorption"], ["is the input of", "MofLattice"], ["is the input of", "MofFractionalCoordinates"], ["is the input of", "MofNeighborIndices"], ["is the input of", "MofBranchPoints"], ["is the input of", "MofBridges"], ["is the input of", "PlotAdjacencyMatrix"], ["is the input of", "GetTerminalIndices"], ["is the input of", "GetFloatingSolventMolecules"], ["is the input of", "GetStructureInfo"], ["is the input of", "CalculateDensity"], ["is the input of", "GetElementComposition"], ["is the input of", "CalculateSymmetry"]], "SMILESToCAS": [["is a", "Material Tool"], ["has the functionality that", "Convert SMILES format to CAS format"], ["inputs", "SMILES"], ["outputs", "CAS"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "CASToPrice": [["is a", "Material Tool"], ["has the functionality that", "Check the average price of the corresponding mof material according to CAS"], ["inputs", "CAS"], ["outputs", "average price"], ["is sourced from", "Web API"], ["does not need", "Security Check"]], "average price": [["is the output of", "CASToPrice"]], "PredictStability": [["is a", "Material Tool"], ["has the functionality that", "Predicts the thermal and solvent removal stability of mof materials in cif format based on trained ai model"], ["inputs", "CIF"], ["outputs", "the score of thermal and solvent removal stability"], ["is sourced from", "AI Model"], ["does not need", "Security Check"]], "the score of thermal and solvent removal stability": [["is the output of", "PredictStability"]], "PredictAdsorption": [["is a", "Material Tool"], ["has the functionality that", "Predicts the adsorption performance of mof materials in cif format based on trained ai model"], ["inputs", "CIF"], ["outputs", "the score of adsorption"], ["is sourced from", "AI Model"], ["does not need", "Security Check"]], "the score of adsorption": [["is the output of", "PredictAdsorption"]], "SearchCSV": [["is a", "Material Tool"], ["has the functionality that", "Query the mof information table to get its accurate attributes"], ["inputs", "Query"], ["outputs", "specific information"], ["is sourced from", "Python Package(chatmof)"], ["does not need", "Security Check"]], "Query": [["is the input of", "SearchCSV"], ["is the input of", "AseTool"], ["is the input of", "UnitConverter"]], "specific information": [["is the output of", "SearchCSV"]], "AseTool": [["is a", "Material Tool"], ["has the functionality that", "Use ASE to query atomic simulation or property-related issues of MOF materials"], ["inputs", "Query"], ["outputs", "Atomic properties"], ["is sourced from", "Python Package(chatmof)"], ["does not need", "Security Check"]], "Atomic properties": [["is the output of", "AseTool"]], "UnitConverter": [["is a", "Material Tool"], ["has the functionality that", "Convert units"], ["inputs", "Query"], ["outputs", "Unit conversion results"], ["is sourced from", "Python Package(chatmof)"], ["does not need", "Security Check"]], "Unit conversion results": [["is the output of", "UnitConverter"]], "MofLattice": [["is a", "Material Tool"], ["has the functionality that", "Query the lattice structure information of mof material"], ["inputs", "CIF"], ["outputs", "lattice structure"], ["is sourced from", "Python Package(moffragmentor)"], ["does not need", "Security Check"]], "lattice structure": [["is the output of", "MofLattice"]], "MofFractionalCoordinates": [["is a", "Material Tool"], ["has the functionality that", "Query the fractional coordinates of the mof material"], ["inputs", "CIF"], ["outputs", "fractional coordinates"], ["is sourced from", "Python Package(moffragmentor)"], ["does not need", "Security Check"]], "fractional coordinates": [["is the output of", "MofFractionalCoordinates"]], "MofNeighborIndices": [["is a", "Material Tool"], ["has the functionality that", "Query the neighbor index of the speCIFied site in the mof material"], ["inputs", "CIF"], ["inputs", "site index"], ["outputs", "neighbor indices"], ["is sourced from", "Python Package(moffragmentor)"], ["does not need", "Security Check"]], "site index": [["is the input of", "MofNeighborIndices"]], "neighbor indices": [["is the output of", "MofNeighborIndices"]], "MofBranchPoints": [["is a", "Material Tool"], ["has the functionality that", "Query all branch points of mof material"], ["inputs", "CIF"], ["outputs", "branch points"], ["is sourced from", "Python Package(moffragmentor)"], ["does not need", "Security Check"]], "branch points": [["is the output of", "MofBranchPoints"]], "MofBridges": [["is a", "Material Tool"], ["has the functionality that", "Query all bridge point information of mof material"], ["inputs", "CIF"], ["outputs", "bridge point"], ["is sourced from", "Python Package(moffragmentor)"], ["does not need", "Security Check"]], "bridge point": [["is the output of", "MofBridges"]], "PlotAdjacencyMatrix": [["is a", "Material Tool"], ["has the functionality that", "Generate a base64-encoded adjacency matrix plot for a given MOF structure from a CIF file."], ["inputs", "CIF"], ["outputs", "image of the adjacency matrix"], ["is sourced from", "Python Package(moffragmentor)"], ["does not need", "Security Check"]], "image of the adjacency matrix": [["is the output of", "PlotAdjacencyMatrix"]], "GetTerminalIndices": [["is a", "Material Tool"], ["has the functionality that", "Generate a Markdown string listing the indices of terminal sites in a MOF structure from a CIF file."], ["inputs", "CIF"], ["outputs", "the indices of terminal sites"], ["is sourced from", "Python Package(moffragmentor)"], ["does not need", "Security Check"]], "the indices of terminal sites": [["is the output of", "GetTerminalIndices"]], "GetFloatingSolventMolecules": [["is a", "Material Tool"], ["has the functionality that", "Generate a Markdown string listing the composition and quantity of floating solvent molecules in a MOF structure from a CIF file."], ["inputs", "CIF"], ["outputs", "floating solvent"], ["is sourced from", "Python Package(moffragmentor)"], ["does not need", "Security Check"]], "floating solvent": [["is the output of", "GetFloatingSolventMolecules"]], "GetStructureInfo": [["is a", "Material Tool"], ["has the functionality that", "Reads a structure file and returns basic information about the structure."], ["inputs", "CIF"], ["outputs", "structure information"], ["is sourced from", "Python Package(pymatgen)"], ["does not need", "Security Check"]], "structure information": [["is the output of", "GetStructureInfo"]], "CalculateDensity": [["is a", "Material Tool"], ["has the functionality that", "Calculates the density of a structure from a file."], ["inputs", "CIF"], ["outputs", "density"], ["is sourced from", "Python Package(pymatgen)"], ["does not need", "Security Check"]], "GetElementComposition": [["is a", "Material Tool"], ["has the functionality that", "Returns the elemental composition of a structure from a file."], ["inputs", "CIF"], ["outputs", "elemental composition"], ["is sourced from", "Python Package(pymatgen)"], ["does not need", "Security Check"]], "elemental composition": [["is the output of", "GetElementComposition"]], "CalculateSymmetry": [["is a", "Material Tool"], ["has the functionality that", "Calculates the symmetry of a structure from a file."], ["inputs", "CIF"], ["outputs", "symmetry information"], ["is sourced from", "Python Package(pymatgen)"], ["does not need", "Security Check"]], "symmetry information": [["is the output of", "CalculateSymmetry"]]}}